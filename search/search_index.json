{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>The CFM Toolbox Editor is a core component of the CFM Toolbox, providing a graphical interface for creating, editing, and visualizing cardinality-based feature models. It is designed to simplify the complexity of working with feature models while offering an intuitive and user-friendly experience. The editor is particularly tailored to handle the intricacies of cardinality-based feature models, making it a powerful tool for researchers, developers, and practitioners in software product line engineering.</p>"},{"location":"#key-features-of-the-cfm-toolbox-editor","title":"Key Features of the CFM Toolbox Editor","text":"<ul> <li>Graphical Creation of Feature Models: Users can visually design feature models.</li> <li>Intuitive User Interface: The editor provides a clean and easy-to-navigate interface, making it accessible for   both beginners ans advanced users.</li> </ul>"},{"location":"#use-cases-for-the-cfm-toolbox-editor","title":"Use Cases for the CFM Toolbox Editor","text":"<ul> <li>Research and Education: Researchers and students can use the editor to experiment with cardinality-based feature   modeling and explore advanced concepts in software engineering.</li> <li>Software Product Line Engineering: The editor is ideal for designing and managing feature models for software product   lines, where variability and commonality need to be explicitly defined.</li> <li>Industrial Applications: The editor can be used in industrial settings to model complex systems and manage product   variability in large-scale projects.</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>The CFM Toolbox editor, it's dependencies, and core plugins can easily be installed from the Python Package Index (PyPI) using the following command:</p> <pre><code>pip3 install cfmtoolbox\n</code></pre>"},{"location":"getting-started/#running-the-cfm-toolbox-editor","title":"Running the CFM Toolbox Editor","text":"<p>After the installation, the CFM Toolbox can be run from the command line using the following command:</p> <pre><code>python3 -m cfmtoolbox --import example.uvl --export example.uvl edit\n</code></pre> <p>For more information on how to use the Toolbox, also refer to the CFM Toolbox Documentation.</p>"},{"location":"editor-usage/add_constraint/","title":"Add Constraint","text":"<p>To add a new feature to your feature model in the CFM Toolbox Editor, follow these steps:</p> <p>1. Right-Click on the Feature</p> <p>Locate the feature in the editor where you want to add a constraint. Right-click on the feature to open the context menu. </p> <p>2. Select \"Add Constraint\" from the Menu</p> <p>From the context menu, select the option \"Add Constraint\". This will open the constraint creation dialog.</p> <p>3. Define the Constraint</p> <p>In the dialog, provide the following details:</p> <ol> <li>First Feature: Select the first feature involved in the constraint.</li> <li>Cardinality for First Feature: Specify the cardinality for the first feature (e.g., 1..1, 0..*, etc.).</li> <li>Constraint Type: Choose the type of constraint (e.g., requires, excludes, etc.).</li> <li>Second Feature: Select the second feature involved in the constraint.</li> <li>Cardinality for Second Feature: Specify the cardinality for the second feature.    Click \"Add\" or \"Apply\" to confirm and create the constraint.</li> </ol> <p></p>"},{"location":"editor-usage/add_constraint/#notes","title":"Notes","text":"<p>Constraint Types:</p> <ul> <li>Requires: If the first feature is selected, the second feature must also be selected.</li> <li>Excludes: If the first feature is selected, the second feature cannot be selected, and vice versa.</li> </ul> <p>Cardinality: Ensure the cardinality values align with your model's requirements.</p> <p>Validation: The editor will validate the constraint to ensure it does not conflict with existing constraints or feature relationships.</p>"},{"location":"editor-usage/add_constraint/#constraint-panel","title":"Constraint Panel","text":"<p>You can view and manage all constraints in the Constraints Panel of the editor. This panel provides an overview of all constraints and allows you to edit or delete them if needed.</p>"},{"location":"editor-usage/add_constraint/#example","title":"Example","text":"<p>Here\u2019s an example of how a constraint might look in the feature model:</p> <pre><code>Feature A (1..1) requires Feature B (1..1)\n</code></pre>"},{"location":"editor-usage/add_feature/","title":"Add Feature","text":"<p>To add a new feature to your feature model in the CFM Toolbox Editor, follow these steps:</p> <p>1. Right-Click on the Feature</p> <p>Locate the feature in the editor where you want to add a child feature. Right-click on the feature to open the context menu. </p> <p>2. Select \"add child\" from the Menu</p> <p>From the context menu, select the option \"Add Child\". This will open a dialog for creating a new child feature.</p> <p>3. Enter Feature Details</p> <p>In the dialog, provide the following details:</p> <ul> <li>Name: Enter a name for the new feature.</li> <li>Cardinalities: Specify the cardinality values for the feature (e.g., 1..1, 0..*, etc.).   Click the \"Add\" button to confirm and create the feature.</li> </ul> <p></p> <p>The new feature will now appear as a child of the selected feature in the editor. You can continue editing or adding more features as needed.</p>"},{"location":"editor-usage/add_feature/#notes","title":"Notes","text":"<p>Cardinality: Ensure that the cardinality values align with your feature model's requirements.</p> <p>Undo: If you make a mistake, you can use the Undo option (Ctrl+Z or Cmd+Z) to revert the changes.</p>"},{"location":"editor-usage/add_feature/#example","title":"Example","text":"<p>Here\u2019s an example of how the feature tree might look after adding a new feature:</p> <pre><code>Root Feature\n\u251c\u2500\u2500 Feature A\n\u2502   \u2514\u2500\u2500 New Child Feature (1..1)\n\u2514\u2500\u2500 Feature B\n</code></pre>"},{"location":"editor-usage/delete_constraint/","title":"Delete Constraint","text":"<p>To delete a constraint from your feature model in the CFM Toolbox Editor, follow these steps:</p> <p>1. Select the Constraint in the Constraints Panel</p> <p>In the Constraints Panel in the editor, locate and select the constraint you want to delete.</p> <p></p> <p>2. Click the Delete Icon</p> <p>Once the constraint is selected, click the Delete Icon (usually represented by a trash bin or cross symbol) in the Constraints Panel.</p> <p>3. Confirm Deletion</p> <p>A confirmation dialog will appear to ensure you want to delete the constraint. Click \"OK\" or \"Cancel\" to proceed with the deletion.</p> <p></p>"},{"location":"editor-usage/delete_constraint/#notes","title":"Notes","text":"<p>Impact: Deleting a constraint may affect the validity of your feature model. Ensure that the removal aligns with your model's requirements.</p> <p>Undo: If you accidentally delete a constraint, you can use the Undo option (Ctrl+Z or Cmd+Z) to restore it.</p>"},{"location":"editor-usage/delete_constraint/#example","title":"Example","text":"<p>Here\u2019s an example of how the Constraints Panel might look before and after deleting a constraint:</p> <p>Before</p> <pre><code>Constraints:\n1. Feature A (1..1) requires Feature B (1..1)\n2. Feature C (0..*) excludes Feature D (1..1)\n</code></pre> <p>After Deleting the First Constraint:</p> <pre><code>Constraints:\n1. Feature C (0..*) excludes Feature D (1..1)\n</code></pre>"},{"location":"editor-usage/delete_feature/","title":"Delete Feature","text":"<p>To delete a feature from your feature model in the CFM Toolbox Editor, follow these steps:</p> <p>1. Right-Click on the Feature</p> <p>Locate the feature in the editor that you want to delete. Right-click on the feature to open the context menu.</p> <p></p> <p>2. Select \"Delete Feature\" from the Menu</p> <p>From the context menu, select the option \"Delete Feature\". This will open a confirmation dialog.</p> <p>3. Confirm Deletion</p> <p>In the confirmation dialog, review the details of the feature you are about to delete. Click \"OK\" or \"Cancel\" to proceed with the deletion.</p> <p></p>"},{"location":"editor-usage/delete_feature/#notes","title":"Notes","text":"<p>Undo: If you accidentally delete a feature, you can use the Undo option (Ctrl+Z or Cmd+Z) to restore it.</p> <p>Impact: Deleting a feature will also remove all its child features and any constraints associated with it. Ensure this is intended before confirming.</p>"},{"location":"editor-usage/delete_feature/#example","title":"Example","text":"<p>Here\u2019s an example of how the feature tree might look before and after deleting a feature:</p> <p>Before</p> <pre><code>Root Feature\n\u251c\u2500\u2500 Feature A\n\u2502   \u2514\u2500\u2500 Child Feature 1\n\u2514\u2500\u2500 Feature B\n</code></pre> <p>After Deleting \"Feature A\"</p> <pre><code>Root Feature\n\u2514\u2500\u2500 Feature B\n</code></pre>"},{"location":"editor-usage/edit_constraint/","title":"Edit Constraint","text":"<p>To delete a constraint from your feature model in the CFM Toolbox Editor, follow these steps:</p> <p>Select the Constraint in the Constraints Panel</p> <p>In the Constraints Panel in the editor, locate and select the constraint you want to edit. </p> <p>2. Click the Edit Icon</p> <p>Once the constraint is selected, click the Edit Icon (usually represented by a pencil or edit symbol) in the Constraints Panel.</p> <p>3. Modify Feature Details</p> <p>In the edit dialog, you can make the following changes:</p> <ol> <li>First Feature: Update the first feature involved in the constraint.</li> <li>Cardinality for First Feature: Adjust the cardinality for the first feature (e.g., 1..1, 0..*, etc.).</li> <li>Constraint Type: Change the type of constraint (e.g., requires, excludes, etc.).</li> <li>Second Feature: Update the second feature involved in the constraint.</li> <li>Cardinality for Second Feature: Adjust the cardinality for the second feature.    Click \"Save\" to confirm your changes.</li> </ol> <p></p>"},{"location":"editor-usage/edit_constraint/#notes","title":"Notes","text":"<p>Validation: The editor will validate the updated constraint to ensure it does not conflict with existing constraints or feature relationships.</p> <p>Impact: Editing a constraint may affect the validity of your feature model. Ensure that the changes align with your model's requirements.</p> <p>Undo: If you make a mistake, you can use the Undo option (Ctrl+Z or Cmd+Z) to revert the changes.</p>"},{"location":"editor-usage/edit_constraint/#example","title":"Example","text":"<p>Here\u2019s an example of how a constraint might look before and after editing:</p> <p>Before</p> <pre><code>Feature A (1..1) requires Feature B (1..1)\n</code></pre> <p>After Editing</p> <pre><code>Feature X (0..1) excludes Feature Y (0..*)\n</code></pre>"},{"location":"editor-usage/edit_feature/","title":"Edit Feature","text":"<p>To edit a feature in your feature model using the CFM Toolbox Editor, follow these steps:</p> <p>1. Right-Click on the Feature</p> <p>Locate the feature in the editor that you want to edit. Right-click on the feature to open the context menu. </p> <p>2. Select \"Edit Feature\" from the Menu</p> <p>From the context menu, select the option \"Edit Feature\". This will open the edit dialog.</p> <p>3. Modify Feature Details</p> <p>In the edit dialog, you can change the following:</p> <ul> <li>Name: Update the name of the feature. Ensure the new name is unique and does not conflict with existing feature names.</li> <li>Cardinality: Adjust the cardinality values (e.g., 1..1, 0..*, etc.) as needed.</li> </ul> <p>Click \"Save Changes\" to confirm your changes. In the edit dialog, you can change the following:</p> <ul> <li>Name: Update the name of the feature. Ensure the new name is unique and does not conflict with existing feature names.</li> <li>Cardinality: Adjust the cardinality values (e.g., 1..1, 0..*, etc.) as needed.   Click \"Save Changes\" to confirm your changes.</li> </ul> <p></p>"},{"location":"editor-usage/edit_feature/#notes","title":"Notes","text":"<p>Unique Name: The feature name must be unique within the model. If the name already exists, you will be prompted to choose a different name.</p> <p>Constraints Update: If the feature is involved in any constraints (e.g., cross-tree constraints), these constraints will be automatically updated to reflect the changes. Ensure the updated constraints still align with your model's requirements.</p> <p>Undo: If you make a mistake, you can use the Undo option (Ctrl+Z or Cmd+Z) to revert the changes.</p>"},{"location":"editor-usage/edit_feature/#example","title":"Example","text":"<p>Here\u2019s an example of how the feature tree might look before and after deleting a feature:</p> <p>Before</p> <pre><code>Root Feature\n\u251c\u2500\u2500 Feature A (1..1)\n\u2514\u2500\u2500 Feature B (0..*)\n</code></pre> <p>After Editing \"Feature A\" to \"Feature X\" with Cardinality 0..1:</p> <pre><code>Root Feature\n\u251c\u2500\u2500 Feature X (0..1)\n\u2514\u2500\u2500 Feature B (0..*)\n</code></pre>"},{"location":"framework/contributing/","title":"Contributing","text":"<p>Below you'll find some useful commands to get started if you want to contribute to the framework itself. Note that we use poetry for project and dependency management.</p>"},{"location":"framework/contributing/#project-setup","title":"Project setup","text":"<ol> <li>Install poetry</li> <li>Install project dependencies by running <code>poetry install</code></li> </ol>"},{"location":"framework/contributing/#running-the-cfmtoolbox","title":"Running the cfmtoolbox","text":"<p>After installing the project and its dependencies, you can run the development version of the CFM Toolbox using the following command:</p> <pre><code>poetry run cfmtoolbox\n</code></pre>"},{"location":"framework/contributing/#formatting-linting","title":"Formatting linting","text":"<p>We use <code>ruff</code> for code formatting and linting, and <code>mypy</code> for static type checking.</p> <p>You can format your code by running</p> <pre><code>poetry run ruff format .\n</code></pre> <p>To check for linting errors, run the following command:</p> <pre><code>poetry run ruff check .\n</code></pre> <p>For static type checking, run the following command:</p> <pre><code>poetry run mypy .\n</code></pre> <p>To automatically check the formatting, linting, and static type checking on every commit, you can install the pre-commit hooks:</p> <pre><code>poetry run pre-commit install\n</code></pre>"},{"location":"framework/contributing/#testing","title":"Testing","text":"<p>We use <code>pytest</code> for testing. To run the tests, use the following command:</p> <pre><code>poetry run pytest\n</code></pre> <p>A test coverage report will automatically be generated, displayed in the terminal, and exported as an interactive HTML report in the <code>htmlcov</code> directory.</p>"},{"location":"framework/contributing/#previewing-the-documentation","title":"Previewing the documentation","text":"<p>We use <code>mkdocs</code> to generate the documentation from markdown files and to deploy it to GitHub Pages. While working on the documentation, you can preview it locally by running the following command:</p> <pre><code>poetry run mkdocs serve\n</code></pre>"},{"location":"framework/api/editor/","title":"CFM Editor","text":""},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp","title":"CFMEditorApp","text":"<pre><code>CFMEditorApp()\n</code></pre> <p>Methods:</p> <ul> <li> <code>add_constraint</code>             \u2013              <p>Start the process of adding a constraint between features.</p> </li> <li> <code>add_expanded_feature</code>             \u2013              <p>Mark a feature as expanded.</p> </li> <li> <code>add_feature</code>             \u2013              <p>Add a new feature to the feature model.</p> </li> <li> <code>delete_constraint</code>             \u2013              <p>Delete a constraint from the feature model.</p> </li> <li> <code>delete_feature</code>             \u2013              <p>Delete a feature from the feature model.</p> </li> <li> <code>edit_feature</code>             \u2013              <p>Edit an existing feature in the feature model.</p> </li> <li> <code>get_currently_highlighted_feature</code>             \u2013              <p>Get the currently highlighted feature.</p> </li> <li> <code>get_feature_by_name</code>             \u2013              <p>Get a feature by its name.</p> </li> <li> <code>redo</code>             \u2013              <p>Redo the last undone action.</p> </li> <li> <code>reset_model</code>             \u2013              <p>Reset the feature model to its initial state.</p> </li> <li> <code>save_model</code>             \u2013              <p>Save the current state of the feature model.</p> </li> <li> <code>show_delete_dialog</code>             \u2013              <p>Show the dialog for deleting a feature.</p> </li> <li> <code>show_feature_dialog</code>             \u2013              <p>Show the dialog for adding or editing a feature.</p> </li> <li> <code>start</code>             \u2013              <p>Start the editor application with the given feature model.</p> </li> <li> <code>undo</code>             \u2013              <p>Undo the last action.</p> </li> <li> <code>update_constraints</code>             \u2013              <p>Update the constraints displayed in the treeview.</p> </li> <li> <code>update_model_state</code>             \u2013              <p>Update the model state after any change.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/cfm_editor.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Initialize the CFMEditorApp with the necessary components and UI setup.\n    \"\"\"\n    self.cfm = None\n    self.root = tk.Tk()\n    self.root.title(\"CFM Editor\")\n\n    self.undo_redo_manager = UndoRedoManager()\n    self.shortcut_manager = ShortcutManager(self)\n\n    self.click_handler = CFMClickHandler()\n\n    self.CARDINALITY_FONT = (\"Arial\", 8)\n\n    self._setup_ui()\n</code></pre>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.add_constraint","title":"add_constraint","text":"<pre><code>add_constraint(feature)\n</code></pre> <p>Start the process of adding a constraint between features.</p> <p>Parameters:</p> Source code in <code>cfmtoolbox_editor/cfm_editor.py</code> <pre><code>def add_constraint(self, feature):\n    \"\"\"\n    Start the process of adding a constraint between features.\n\n    Args:\n        feature (Feature): The feature to start the constraint from.\n    \"\"\"\n    self.canvas.add_constraint(feature)\n</code></pre>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.add_constraint(feature)","title":"<code>feature</code>","text":"(<code>Feature</code>)           \u2013            <p>The feature to start the constraint from.</p>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.add_expanded_feature","title":"add_expanded_feature","text":"<pre><code>add_expanded_feature(feature: Feature)\n</code></pre> <p>Mark a feature as expanded.</p> <p>Parameters:</p> Source code in <code>cfmtoolbox_editor/cfm_editor.py</code> <pre><code>def add_expanded_feature(self, feature: Feature):\n    \"\"\"\n    Mark a feature as expanded.\n\n    Args:\n        feature (Feature): The feature to mark as expanded.\n    \"\"\"\n    self.canvas.add_expanded_feature(feature)\n</code></pre>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.add_expanded_feature(feature)","title":"<code>feature</code>","text":"(<code>Feature</code>)           \u2013            <p>The feature to mark as expanded.</p>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.add_feature","title":"add_feature","text":"<pre><code>add_feature(parent)\n</code></pre> <p>Add a new feature to the feature model.</p> <p>Parameters:</p> Source code in <code>cfmtoolbox_editor/cfm_editor.py</code> <pre><code>def add_feature(self, parent):\n    \"\"\"\n    Add a new feature to the feature model.\n\n    Args:\n        parent (Feature): The parent feature to add the new feature to.\n    \"\"\"\n    self.show_feature_dialog(parent=parent)\n</code></pre>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.add_feature(parent)","title":"<code>parent</code>","text":"(<code>Feature</code>)           \u2013            <p>The parent feature to add the new feature to.</p>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.delete_constraint","title":"delete_constraint","text":"<pre><code>delete_constraint(constraint)\n</code></pre> <p>Delete a constraint from the feature model.</p> <p>Parameters:</p> Source code in <code>cfmtoolbox_editor/cfm_editor.py</code> <pre><code>def delete_constraint(self, constraint):\n    \"\"\"\n    Delete a constraint from the feature model.\n\n    Args:\n        constraint (Constraint): The constraint to delete.\n    \"\"\"\n    if not messagebox.askokcancel(\n        \"Delete Constraint\",\n        f\"Are you sure you want to delete the constraint between \"\n        f\"{constraint.first_feature.name} and {constraint.second_feature.name}?\",\n    ):\n        return\n    self.cfm.constraints.remove(constraint)\n    self.update_model_state()\n</code></pre>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.delete_constraint(constraint)","title":"<code>constraint</code>","text":"(<code>Constraint</code>)           \u2013            <p>The constraint to delete.</p>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.delete_feature","title":"delete_feature","text":"<pre><code>delete_feature(feature)\n</code></pre> <p>Delete a feature from the feature model.</p> <p>Parameters:</p> Source code in <code>cfmtoolbox_editor/cfm_editor.py</code> <pre><code>def delete_feature(self, feature):\n    \"\"\"\n    Delete a feature from the feature model.\n\n    Args:\n        feature (Feature): The feature to delete.\n    \"\"\"\n    # root\n    if feature == self.cfm.root:\n        messagebox.showerror(\"Error\", \"Cannot delete root feature.\")\n\n    # leaf\n    elif len(feature.children) == 0:\n        if messagebox.askokcancel(\n            \"Delete Feature\",\n            f\"Are you sure you want to delete the feature {feature.name} and related constraints?\",\n        ):\n            feature.parent.children.remove(feature)\n            self.cfm.constraints = [\n                c\n                for c in self.cfm.constraints\n                if c.first_feature != feature and c.second_feature != feature\n            ]\n            self.update_model_state()\n\n    # inner node\n    else:\n        self.show_delete_dialog(feature)\n</code></pre>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.delete_feature(feature)","title":"<code>feature</code>","text":"(<code>Feature</code>)           \u2013            <p>The feature to delete.</p>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.edit_feature","title":"edit_feature","text":"<pre><code>edit_feature(feature)\n</code></pre> <p>Edit an existing feature in the feature model.</p> <p>Parameters:</p> Source code in <code>cfmtoolbox_editor/cfm_editor.py</code> <pre><code>def edit_feature(self, feature):\n    \"\"\"\n    Edit an existing feature in the feature model.\n\n    Args:\n        feature (Feature): The feature to edit.\n    \"\"\"\n    self.show_feature_dialog(feature=feature)\n</code></pre>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.edit_feature(feature)","title":"<code>feature</code>","text":"(<code>Feature</code>)           \u2013            <p>The feature to edit.</p>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.get_currently_highlighted_feature","title":"get_currently_highlighted_feature","text":"<pre><code>get_currently_highlighted_feature() -&gt; Feature | None\n</code></pre> <p>Get the currently highlighted feature.</p> <p>Returns:</p> <ul> <li> <code>Feature | None</code>           \u2013            <p>Feature | None: The currently highlighted feature, or None if no feature is highlighted.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/cfm_editor.py</code> <pre><code>def get_currently_highlighted_feature(self) -&gt; Feature | None:\n    \"\"\"\n    Get the currently highlighted feature.\n\n    Returns:\n        Feature | None: The currently highlighted feature, or None if no feature is highlighted.\n    \"\"\"\n    return self.canvas.currently_highlighted_feature\n</code></pre>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.get_feature_by_name","title":"get_feature_by_name","text":"<pre><code>get_feature_by_name(name: str) -&gt; Feature | None\n</code></pre> <p>Get a feature by its name.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Feature | None</code>           \u2013            <p>Feature | None: The feature with the specified name, or None if no such feature exists.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/cfm_editor.py</code> <pre><code>def get_feature_by_name(self, name: str) -&gt; Feature | None:\n    \"\"\"\n    Get a feature by its name.\n\n    Args:\n        name (str): The name of the feature.\n\n    Returns:\n        Feature | None: The feature with the specified name, or None if no such feature exists.\n    \"\"\"\n    for feature in self.cfm.features:\n        if feature.name == name:\n            return feature\n    return None\n</code></pre>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.get_feature_by_name(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>The name of the feature.</p>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.redo","title":"redo","text":"<pre><code>redo()\n</code></pre> <p>Redo the last undone action.</p> Source code in <code>cfmtoolbox_editor/cfm_editor.py</code> <pre><code>def redo(self):\n    \"\"\"\n    Redo the last undone action.\n    \"\"\"\n    next_state = self.undo_redo_manager.redo()\n    if next_state:\n        self._load_state(next_state)\n</code></pre>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.reset_model","title":"reset_model","text":"<pre><code>reset_model()\n</code></pre> <p>Reset the feature model to its initial state.</p> Source code in <code>cfmtoolbox_editor/cfm_editor.py</code> <pre><code>def reset_model(self):\n    \"\"\"\n    Reset the feature model to its initial state.\n    \"\"\"\n    original_state = self.undo_redo_manager.reset()\n    if original_state:\n        self._load_state(original_state)\n</code></pre>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.save_model","title":"save_model","text":"<pre><code>save_model()\n</code></pre> <p>Save the current state of the feature model.</p> Source code in <code>cfmtoolbox_editor/cfm_editor.py</code> <pre><code>def save_model(self):\n    \"\"\"\n    Save the current state of the feature model.\n    \"\"\"\n    if self._confirm_save_changes():\n        self.root.quit()\n</code></pre>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.show_delete_dialog","title":"show_delete_dialog","text":"<pre><code>show_delete_dialog(feature: Feature)\n</code></pre> <p>Show the dialog for deleting a feature.</p> <p>Parameters:</p> Source code in <code>cfmtoolbox_editor/cfm_editor.py</code> <pre><code>def show_delete_dialog(self, feature: Feature):\n    \"\"\"\n    Show the dialog for deleting a feature.\n\n    Args:\n        feature (Feature): The feature to delete.\n    \"\"\"\n    DeleteFeatureDialog(\n        parent_widget=self.root,  # Pass the parent widget (e.g., the root window)\n        feature=feature,  # The feature to be deleted\n        cfm=self.cfm,  # The CFM model containing constraints and features\n        update_model_state_callback=self.update_model_state,  # Callback to update the model state\n        show_feature_dialog_callback=self.show_feature_dialog,  # Callback to open the feature dialog\n    )\n</code></pre>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.show_delete_dialog(feature)","title":"<code>feature</code>","text":"(<code>Feature</code>)           \u2013            <p>The feature to delete.</p>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.show_feature_dialog","title":"show_feature_dialog","text":"<pre><code>show_feature_dialog(\n    parent: Feature | None = None,\n    feature: Feature | None = None,\n)\n</code></pre> <p>Show the dialog for adding or editing a feature.</p> <p>Parameters:</p> Source code in <code>cfmtoolbox_editor/cfm_editor.py</code> <pre><code>def show_feature_dialog(\n    self, parent: Feature | None = None, feature: Feature | None = None\n):\n    \"\"\"\n    Show the dialog for adding or editing a feature.\n\n    Args:\n        parent (Feature, optional): The parent feature for the new feature. Defaults to None.\n        feature (Feature, optional): The feature being edited. Defaults to None.\n    \"\"\"\n    FeatureDialog(\n        parent_widget=self.root,\n        cfm=self.cfm,\n        add_expanded_feature_callback=self.add_expanded_feature,\n        update_model_state_callback=self.update_model_state,\n        show_feature_dialog_callback=self.show_feature_dialog,\n        parent_feature=parent,\n        feature=feature,\n    )\n</code></pre>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.show_feature_dialog(parent)","title":"<code>parent</code>","text":"(<code>Feature</code>, default:                   <code>None</code> )           \u2013            <p>The parent feature for the new feature. Defaults to None.</p>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.show_feature_dialog(feature)","title":"<code>feature</code>","text":"(<code>Feature</code>, default:                   <code>None</code> )           \u2013            <p>The feature being edited. Defaults to None.</p>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.start","title":"start","text":"<pre><code>start(cfm: CFM) -&gt; CFM\n</code></pre> <p>Start the editor application with the given feature model.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>CFM</code> (              <code>CFM</code> )          \u2013            <p>The edited feature model.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/cfm_editor.py</code> <pre><code>def start(self, cfm: CFM) -&gt; CFM:\n    \"\"\"\n    Start the editor application with the given feature model.\n\n    Args:\n        cfm (CFM): The feature model to edit.\n\n    Returns:\n        CFM: The edited feature model.\n    \"\"\"\n    self.cfm = cfm\n    self.undo_redo_manager.set_initial_state(self.cfm)\n    self.canvas.initialize()\n    self.update_model_state()\n    self.root.mainloop()\n    return self.cfm\n</code></pre>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.start(cfm)","title":"<code>cfm</code>","text":"(<code>CFM</code>)           \u2013            <p>The feature model to edit.</p>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.undo","title":"undo","text":"<pre><code>undo()\n</code></pre> <p>Undo the last action.</p> Source code in <code>cfmtoolbox_editor/cfm_editor.py</code> <pre><code>def undo(self):\n    \"\"\"\n    Undo the last action.\n    \"\"\"\n    previous_state = self.undo_redo_manager.undo()\n    if previous_state:\n        self._load_state(previous_state)\n</code></pre>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.update_constraints","title":"update_constraints","text":"<pre><code>update_constraints()\n</code></pre> <p>Update the constraints displayed in the treeview.</p> Source code in <code>cfmtoolbox_editor/cfm_editor.py</code> <pre><code>def update_constraints(self):\n    \"\"\"\n    Update the constraints displayed in the treeview.\n    \"\"\"\n    self.constraints.update_constraints(self.cfm.constraints)\n</code></pre>"},{"location":"framework/api/editor/#cfmtoolbox_editor.cfm_editor.CFMEditorApp.update_model_state","title":"update_model_state","text":"<pre><code>update_model_state()\n</code></pre> <p>Update the model state after any change.</p> Source code in <code>cfmtoolbox_editor/cfm_editor.py</code> <pre><code>def update_model_state(self):\n    \"\"\"\n    Update the model state after any change.\n    \"\"\"\n    self.canvas.cancel_add_constraint()\n    self.undo_redo_manager.add_state(self.cfm)\n    self.canvas.draw_model()\n    self.update_constraints()\n</code></pre>"},{"location":"framework/api/ui/canvas/","title":"Canvas API","text":""},{"location":"framework/api/ui/canvas/#cfmtoolbox_editor.ui.cfm_canvas","title":"cfm_canvas","text":"<p>This module defines the CFMCanvas class, which is responsible for rendering and interacting with a feature model using the Tkinter library. The CFMCanvas class provides functionalities to draw features, manage their expanded/collapsed states, and handle user interactions such as adding, editing, and deleting features, as well as adding constraints between them.</p> <p>Classes:</p> <ul> <li> <code>CFMCanvas</code>           \u2013            <p>A class to create and manage a canvas for displaying and interacting with a feature model.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>CFMCanvas</code>           \u2013            </li> </ul>"},{"location":"framework/api/ui/canvas/#cfmtoolbox_editor.ui.cfm_canvas.CFMCanvas","title":"CFMCanvas","text":"<pre><code>CFMCanvas(main_frame, tk_root, editor, click_handler)\n</code></pre> <p>Methods:</p> <ul> <li> <code>add_constraint</code>             \u2013              <p>Start the process of adding a constraint between features.</p> </li> <li> <code>add_expanded_feature</code>             \u2013              <p>Mark a feature as expanded.</p> </li> <li> <code>cancel_add_constraint</code>             \u2013              <p>Cancel the process of adding a constraint.</p> </li> <li> <code>clear</code>             \u2013              <p>Clear all elements from the canvas.</p> </li> <li> <code>configure_scroll_region</code>             \u2013              <p>Configure the scroll region of the canvas.</p> </li> <li> <code>draw_model</code>             \u2013              <p>Draw the entire feature model on the canvas.</p> </li> <li> <code>initialize</code>             \u2013              <p>Initialize the canvas by setting the initial states of all features.</p> </li> <li> <code>initialize_feature_states</code>             \u2013              <p>Recursively initialize the expanded/collapsed states of all features.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/ui/cfm_canvas.py</code> <pre><code>def __init__(\n    self,\n    main_frame,\n    tk_root,\n    editor,\n    click_handler,\n):\n    self.main_frame = main_frame\n    self.tk_root = tk_root\n    self.editor = editor\n    self.click_handler = click_handler\n\n    self.expanded_features: Dict[\n        int, bool\n    ] = {}  # Dictionary to track expanded/collapsed state of features\n    self.positions: Dict[int, Point] = {}\n    self.currently_highlighted_feature: Feature | None = None\n\n    self.info_label = None\n    self.cancel_button_window = None\n\n    self.CARDINALITY_FONT = (\"Arial\", 8)\n    self.MAX_NODE_WIDTH = 120\n\n    self._create_canvas()\n</code></pre>"},{"location":"framework/api/ui/canvas/#cfmtoolbox_editor.ui.cfm_canvas.CFMCanvas.add_constraint","title":"add_constraint","text":"<pre><code>add_constraint(feature)\n</code></pre> <p>Start the process of adding a constraint between features.</p> <p>Parameters:</p> Source code in <code>cfmtoolbox_editor/ui/cfm_canvas.py</code> <pre><code>def add_constraint(self, feature):\n    \"\"\"\n    Start the process of adding a constraint between features.\n\n    Args:\n        feature (Feature): The feature to start the constraint from.\n    \"\"\"\n    self._highlight_feature(feature)\n\n    def on_canvas_click(event):\n        clicked_item = self.canvas.find_withtag(\"current\")\n        if not clicked_item:\n            messagebox.showerror(\"Selection Error\", \"Please click on a feature.\")\n            return\n\n        clicked_tags = self.canvas.gettags(clicked_item[0])\n        second_feature_name = next(\n            (\n                tag\n                for tag in clicked_tags\n                if tag in (feat.name for feat in self.editor.cfm.features)\n            ),\n            None,\n        )\n        second_feature = next(\n            (f for f in self.editor.cfm.features if f.name == second_feature_name),\n            None,\n        )\n\n        if not second_feature:\n            messagebox.showerror(\"Selection Error\", \"Please click on a feature.\")\n            return\n\n        self.cancel_add_constraint()\n        self.editor.constraints.constraint_dialog(\n            initial_first_feature=feature, initial_second_feature=second_feature\n        )\n\n    self.info_label = self.canvas.create_text(\n        400,\n        15,\n        text=\"Click on the second feature to define the constraint.\",\n        fill=\"black\",\n        font=(\"Arial\", 12),\n    )\n    cancel_button = ttk.Button(\n        self.tk_root, text=\"Cancel\", command=self.cancel_add_constraint\n    )\n    self.cancel_button_window = self.canvas.create_window(\n        650, 15, window=cancel_button\n    )\n    self.canvas.bind(self.click_handler.left_click(), on_canvas_click)\n</code></pre>"},{"location":"framework/api/ui/canvas/#cfmtoolbox_editor.ui.cfm_canvas.CFMCanvas.add_constraint(feature)","title":"<code>feature</code>","text":"(<code>Feature</code>)           \u2013            <p>The feature to start the constraint from.</p>"},{"location":"framework/api/ui/canvas/#cfmtoolbox_editor.ui.cfm_canvas.CFMCanvas.add_expanded_feature","title":"add_expanded_feature","text":"<pre><code>add_expanded_feature(feature: Feature)\n</code></pre> <p>Mark a feature as expanded.</p> <p>Parameters:</p> Source code in <code>cfmtoolbox_editor/ui/cfm_canvas.py</code> <pre><code>def add_expanded_feature(self, feature: Feature):\n    \"\"\"\n    Mark a feature as expanded.\n\n    Args:\n        feature (Feature): The feature to mark as expanded.\n    \"\"\"\n    self.expanded_features[id(feature)] = True\n</code></pre>"},{"location":"framework/api/ui/canvas/#cfmtoolbox_editor.ui.cfm_canvas.CFMCanvas.add_expanded_feature(feature)","title":"<code>feature</code>","text":"(<code>Feature</code>)           \u2013            <p>The feature to mark as expanded.</p>"},{"location":"framework/api/ui/canvas/#cfmtoolbox_editor.ui.cfm_canvas.CFMCanvas.cancel_add_constraint","title":"cancel_add_constraint","text":"<pre><code>cancel_add_constraint()\n</code></pre> <p>Cancel the process of adding a constraint.</p> Source code in <code>cfmtoolbox_editor/ui/cfm_canvas.py</code> <pre><code>def cancel_add_constraint(self):\n    \"\"\"\n    Cancel the process of adding a constraint.\n    \"\"\"\n    self.canvas.delete(self.info_label)\n    self.canvas.delete(self.cancel_button_window)\n    self.canvas.unbind(self.click_handler.left_click())\n    self._cancel_highlight()\n</code></pre>"},{"location":"framework/api/ui/canvas/#cfmtoolbox_editor.ui.cfm_canvas.CFMCanvas.clear","title":"clear","text":"<pre><code>clear()\n</code></pre> <p>Clear all elements from the canvas.</p> Source code in <code>cfmtoolbox_editor/ui/cfm_canvas.py</code> <pre><code>def clear(self):\n    \"\"\"\n    Clear all elements from the canvas.\n    \"\"\"\n    self.canvas.delete(\"all\")\n</code></pre>"},{"location":"framework/api/ui/canvas/#cfmtoolbox_editor.ui.cfm_canvas.CFMCanvas.configure_scroll_region","title":"configure_scroll_region","text":"<pre><code>configure_scroll_region(x_min, y_min, x_max, y_max)\n</code></pre> <p>Configure the scroll region of the canvas.</p> <p>Parameters:</p> Source code in <code>cfmtoolbox_editor/ui/cfm_canvas.py</code> <pre><code>def configure_scroll_region(self, x_min, y_min, x_max, y_max):\n    \"\"\"\n    Configure the scroll region of the canvas.\n\n    Args:\n        x_min (int): Minimum x-coordinate of the scroll region.\n        y_min (int): Minimum y-coordinate of the scroll region.\n        x_max (int): Maximum x-coordinate of the scroll region.\n        y_max (int): Maximum y-coordinate of the scroll region.\n    \"\"\"\n    self.canvas.config(scrollregion=(x_min, y_min, x_max, y_max))\n</code></pre>"},{"location":"framework/api/ui/canvas/#cfmtoolbox_editor.ui.cfm_canvas.CFMCanvas.configure_scroll_region(x_min)","title":"<code>x_min</code>","text":"(<code>int</code>)           \u2013            <p>Minimum x-coordinate of the scroll region.</p>"},{"location":"framework/api/ui/canvas/#cfmtoolbox_editor.ui.cfm_canvas.CFMCanvas.configure_scroll_region(y_min)","title":"<code>y_min</code>","text":"(<code>int</code>)           \u2013            <p>Minimum y-coordinate of the scroll region.</p>"},{"location":"framework/api/ui/canvas/#cfmtoolbox_editor.ui.cfm_canvas.CFMCanvas.configure_scroll_region(x_max)","title":"<code>x_max</code>","text":"(<code>int</code>)           \u2013            <p>Maximum x-coordinate of the scroll region.</p>"},{"location":"framework/api/ui/canvas/#cfmtoolbox_editor.ui.cfm_canvas.CFMCanvas.configure_scroll_region(y_max)","title":"<code>y_max</code>","text":"(<code>int</code>)           \u2013            <p>Maximum y-coordinate of the scroll region.</p>"},{"location":"framework/api/ui/canvas/#cfmtoolbox_editor.ui.cfm_canvas.CFMCanvas.draw_model","title":"draw_model","text":"<pre><code>draw_model()\n</code></pre> <p>Draw the entire feature model on the canvas.</p> Source code in <code>cfmtoolbox_editor/ui/cfm_canvas.py</code> <pre><code>def draw_model(self):\n    \"\"\"\n    Draw the entire feature model on the canvas.\n    \"\"\"\n    self.positions = GraphLayoutCalculator(\n        self.editor.cfm, self.expanded_features, self.MAX_NODE_WIDTH\n    ).compute_positions()\n    self.clear()\n    self._draw_feature(self.editor.cfm.root, \"middle\")\n\n    min_x = min(pos.x for pos in self.positions.values())\n    max_x = max(pos.x for pos in self.positions.values())\n    max_y = max(pos.y for pos in self.positions.values())\n\n    padding_x = 100\n    padding_y = 50\n    self.configure_scroll_region(\n        min(min_x - padding_x, 0), 0, max_x + padding_x, max_y + padding_y\n    )\n</code></pre>"},{"location":"framework/api/ui/canvas/#cfmtoolbox_editor.ui.cfm_canvas.CFMCanvas.initialize","title":"initialize","text":"<pre><code>initialize()\n</code></pre> <p>Initialize the canvas by setting the initial states of all features.</p> Source code in <code>cfmtoolbox_editor/ui/cfm_canvas.py</code> <pre><code>def initialize(self):\n    \"\"\"\n    Initialize the canvas by setting the initial states of all features.\n    \"\"\"\n    self.initialize_feature_states(self.editor.cfm.root)\n</code></pre>"},{"location":"framework/api/ui/canvas/#cfmtoolbox_editor.ui.cfm_canvas.CFMCanvas.initialize_feature_states","title":"initialize_feature_states","text":"<pre><code>initialize_feature_states(feature)\n</code></pre> <p>Recursively initialize the expanded/collapsed states of all features.</p> <p>Parameters:</p> Source code in <code>cfmtoolbox_editor/ui/cfm_canvas.py</code> <pre><code>def initialize_feature_states(self, feature):\n    \"\"\"\n    Recursively initialize the expanded/collapsed states of all features.\n\n    Args:\n        feature (Feature): The feature to initialize.\n    \"\"\"\n    # Initialize all features as expanded\n    self.expanded_features[id(feature)] = True\n    for child in feature.children:\n        self.initialize_feature_states(child)\n</code></pre>"},{"location":"framework/api/ui/canvas/#cfmtoolbox_editor.ui.cfm_canvas.CFMCanvas.initialize_feature_states(feature)","title":"<code>feature</code>","text":"(<code>Feature</code>)           \u2013            <p>The feature to initialize.</p>"},{"location":"framework/api/ui/constraints/","title":"Constraints API","text":""},{"location":"framework/api/ui/constraints/#cfmtoolbox_editor.ui.cfm_constraints","title":"cfm_constraints","text":"<p>This module defines the CFMConstraints class, which is responsible for managing and displaying constraints in a feature model using the Tkinter library. The CFMConstraints class provides functionalities to add, edit, and delete constraints, as well as to display them in a treeview with tooltips for additional information.</p> <p>Classes:</p> <ul> <li> <code>CFMConstraints</code>           \u2013            <p>A class to create and manage the UI elements for displaying and interacting with constraints.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>CFMConstraints</code>           \u2013            </li> </ul>"},{"location":"framework/api/ui/constraints/#cfmtoolbox_editor.ui.cfm_constraints.CFMConstraints","title":"CFMConstraints","text":"<pre><code>CFMConstraints(parent, editor, click_handler)\n</code></pre> <p>Methods:</p> <ul> <li> <code>constraint_dialog</code>             \u2013              <p>Opens a dialog for adding or editing a constraint. If <code>constraint</code> is provided, it will edit the existing</p> </li> <li> <code>edit_constraint</code>             \u2013              <p>Open the dialog to edit an existing constraint.</p> </li> <li> <code>get_constraints_frame</code>             \u2013              <p>Get the frame containing the constraints UI elements.</p> </li> <li> <code>get_tree</code>             \u2013              <p>Get the treeview widget for displaying constraints.</p> </li> <li> <code>on_constraints_click</code>             \u2013              <p>Handle click events on the constraints treeview.</p> </li> <li> <code>on_constraints_hover</code>             \u2013              <p>Handle hover events on the constraints treeview to show tooltips.</p> </li> <li> <code>on_constraints_leave</code>             \u2013              <p>Handle leave events on the constraints treeview to hide tooltips.</p> </li> <li> <code>update_constraints</code>             \u2013              <p>Update the constraints displayed in the treeview.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/ui/cfm_constraints.py</code> <pre><code>def __init__(self, parent, editor, click_handler):\n    self.parent = parent\n    self.editor = editor\n    self.click_handler = click_handler\n    self.constraint_mapping: Dict[\n        str, Constraint\n    ] = {}  # Mapping of constraint treeview items to constraints\n    self.last_hovered_cell: Tuple[str | None, str | None] = (\n        None,\n        None,\n    )  # (row, column) for constraints tooltip\n    self._create_constraints_frame()\n    self.tooltip = self._create_constraints_tooltip()\n</code></pre>"},{"location":"framework/api/ui/constraints/#cfmtoolbox_editor.ui.cfm_constraints.CFMConstraints.constraint_dialog","title":"constraint_dialog","text":"<pre><code>constraint_dialog(\n    constraint=None,\n    initial_first_feature=None,\n    initial_second_feature=None,\n)\n</code></pre> <p>Opens a dialog for adding or editing a constraint. If <code>constraint</code> is provided, it will edit the existing constraint. Otherwise, it will create a new constraint with <code>first_feature</code> and <code>second_feature</code> preselected if provided.</p> <p>Parameters:</p> Source code in <code>cfmtoolbox_editor/ui/cfm_constraints.py</code> <pre><code>def constraint_dialog(\n    self, constraint=None, initial_first_feature=None, initial_second_feature=None\n):\n    \"\"\"\n    Opens a dialog for adding or editing a constraint. If `constraint` is provided, it will edit the existing\n    constraint. Otherwise, it will create a new constraint with `first_feature` and `second_feature` preselected\n    if provided.\n\n    Args:\n        constraint (Constraint, optional): The constraint to edit. Defaults to None.\n        initial_first_feature (Feature, optional): The first feature to preselect. Defaults to None.\n        initial_second_feature (Feature, optional): The second feature to preselect. Defaults to None.\n    \"\"\"\n    dialog = ConstraintDialog(\n        parent_widget=self.editor.root,\n        editor=self.editor,\n        constraint=constraint,\n        initial_first_feature=initial_first_feature,\n        initial_second_feature=initial_second_feature,\n    )\n    result = dialog.show()\n    if result:\n        self.editor.cfm.constraints.append(result)\n    self.editor.update_model_state()\n</code></pre>"},{"location":"framework/api/ui/constraints/#cfmtoolbox_editor.ui.cfm_constraints.CFMConstraints.constraint_dialog(constraint)","title":"<code>constraint</code>","text":"(<code>Constraint</code>, default:                   <code>None</code> )           \u2013            <p>The constraint to edit. Defaults to None.</p>"},{"location":"framework/api/ui/constraints/#cfmtoolbox_editor.ui.cfm_constraints.CFMConstraints.constraint_dialog(initial_first_feature)","title":"<code>initial_first_feature</code>","text":"(<code>Feature</code>, default:                   <code>None</code> )           \u2013            <p>The first feature to preselect. Defaults to None.</p>"},{"location":"framework/api/ui/constraints/#cfmtoolbox_editor.ui.cfm_constraints.CFMConstraints.constraint_dialog(initial_second_feature)","title":"<code>initial_second_feature</code>","text":"(<code>Feature</code>, default:                   <code>None</code> )           \u2013            <p>The second feature to preselect. Defaults to None.</p>"},{"location":"framework/api/ui/constraints/#cfmtoolbox_editor.ui.cfm_constraints.CFMConstraints.edit_constraint","title":"edit_constraint","text":"<pre><code>edit_constraint(constraint)\n</code></pre> <p>Open the dialog to edit an existing constraint.</p> <p>Parameters:</p> Source code in <code>cfmtoolbox_editor/ui/cfm_constraints.py</code> <pre><code>def edit_constraint(self, constraint):\n    \"\"\"\n    Open the dialog to edit an existing constraint.\n\n    Args:\n        constraint (Constraint): The constraint to edit.\n    \"\"\"\n    self.constraint_dialog(constraint=constraint)\n</code></pre>"},{"location":"framework/api/ui/constraints/#cfmtoolbox_editor.ui.cfm_constraints.CFMConstraints.edit_constraint(constraint)","title":"<code>constraint</code>","text":"(<code>Constraint</code>)           \u2013            <p>The constraint to edit.</p>"},{"location":"framework/api/ui/constraints/#cfmtoolbox_editor.ui.cfm_constraints.CFMConstraints.get_constraints_frame","title":"get_constraints_frame","text":"<pre><code>get_constraints_frame()\n</code></pre> <p>Get the frame containing the constraints UI elements.</p> <p>Returns:</p> <ul> <li>           \u2013            <p>ttk.Frame: The frame containing the constraints UI elements.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/ui/cfm_constraints.py</code> <pre><code>def get_constraints_frame(self):\n    \"\"\"\n    Get the frame containing the constraints UI elements.\n\n    Returns:\n        ttk.Frame: The frame containing the constraints UI elements.\n    \"\"\"\n    return self.constraints_frame\n</code></pre>"},{"location":"framework/api/ui/constraints/#cfmtoolbox_editor.ui.cfm_constraints.CFMConstraints.get_tree","title":"get_tree","text":"<pre><code>get_tree()\n</code></pre> <p>Get the treeview widget for displaying constraints.</p> <p>Returns:</p> <ul> <li>           \u2013            <p>ttk.Treeview: The treeview widget.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/ui/cfm_constraints.py</code> <pre><code>def get_tree(self):\n    \"\"\"\n    Get the treeview widget for displaying constraints.\n\n    Returns:\n        ttk.Treeview: The treeview widget.\n    \"\"\"\n    return self.constraints_tree\n</code></pre>"},{"location":"framework/api/ui/constraints/#cfmtoolbox_editor.ui.cfm_constraints.CFMConstraints.on_constraints_click","title":"on_constraints_click","text":"<pre><code>on_constraints_click(event)\n</code></pre> <p>Handle click events on the constraints treeview.</p> <p>Parameters:</p> Source code in <code>cfmtoolbox_editor/ui/cfm_constraints.py</code> <pre><code>def on_constraints_click(self, event):\n    \"\"\"\n    Handle click events on the constraints treeview.\n\n    Args:\n        event (tk.Event): The click event.\n    \"\"\"\n    region = self.constraints_tree.identify(\"region\", event.x, event.y)\n    if region == \"cell\":\n        row = self.constraints_tree.identify_row(event.y)\n        constraint = self.constraint_mapping.get(row)\n        if not constraint:\n            return\n\n        column = self.constraints_tree.identify_column(event.x)\n        col_index = int(column[1:]) - 1\n        columns = self.constraints_tree[\"columns\"]\n        col_name = columns[col_index] if 0 &lt;= col_index &lt; len(columns) else None\n\n        if col_name == \"Edit\":\n            self.edit_constraint(constraint)\n\n        elif col_name == \"Delete\":\n            self.editor.delete_constraint(constraint)\n</code></pre>"},{"location":"framework/api/ui/constraints/#cfmtoolbox_editor.ui.cfm_constraints.CFMConstraints.on_constraints_click(event)","title":"<code>event</code>","text":"(<code>Event</code>)           \u2013            <p>The click event.</p>"},{"location":"framework/api/ui/constraints/#cfmtoolbox_editor.ui.cfm_constraints.CFMConstraints.on_constraints_hover","title":"on_constraints_hover","text":"<pre><code>on_constraints_hover(event)\n</code></pre> <p>Handle hover events on the constraints treeview to show tooltips.</p> <p>Parameters:</p> Source code in <code>cfmtoolbox_editor/ui/cfm_constraints.py</code> <pre><code>def on_constraints_hover(self, event):\n    \"\"\"\n    Handle hover events on the constraints treeview to show tooltips.\n\n    Args:\n        event (tk.Event): The hover event.\n    \"\"\"\n    item = self.constraints_tree.identify_row(event.y)\n    column = self.constraints_tree.identify_column(event.x)\n\n    if item and column:\n        if (item, column) == self.last_hovered_cell:\n            return\n        self.last_hovered_cell = (item, column)\n\n        col_index = int(column[1:]) - 1\n        columns = self.constraints_tree[\"columns\"]\n        col_name = columns[col_index] if 0 &lt;= col_index &lt; len(columns) else None\n        if col_name in [\"Edit\", \"Delete\", None]:\n            self.tooltip.hide_tip()\n            return\n\n        value = self.constraints_tree.item(item, \"values\")\n        if value and col_index &lt; len(value):\n            self.tooltip.show_tip(value[col_index], x_pos=100)\n        else:\n            self.tooltip.hide_tip()\n    else:\n        self.tooltip.hide_tip()\n        self.last_hovered_cell = (None, None)\n</code></pre>"},{"location":"framework/api/ui/constraints/#cfmtoolbox_editor.ui.cfm_constraints.CFMConstraints.on_constraints_hover(event)","title":"<code>event</code>","text":"(<code>Event</code>)           \u2013            <p>The hover event.</p>"},{"location":"framework/api/ui/constraints/#cfmtoolbox_editor.ui.cfm_constraints.CFMConstraints.on_constraints_leave","title":"on_constraints_leave","text":"<pre><code>on_constraints_leave(event)\n</code></pre> <p>Handle leave events on the constraints treeview to hide tooltips.</p> <p>Parameters:</p> Source code in <code>cfmtoolbox_editor/ui/cfm_constraints.py</code> <pre><code>def on_constraints_leave(self, event):\n    \"\"\"\n    Handle leave events on the constraints treeview to hide tooltips.\n\n    Args:\n        event (tk.Event): The leave event.\n    \"\"\"\n    self.tooltip.hide_tip()\n    self.last_hovered_cell = (None, None)\n</code></pre>"},{"location":"framework/api/ui/constraints/#cfmtoolbox_editor.ui.cfm_constraints.CFMConstraints.on_constraints_leave(event)","title":"<code>event</code>","text":"(<code>Event</code>)           \u2013            <p>The leave event.</p>"},{"location":"framework/api/ui/constraints/#cfmtoolbox_editor.ui.cfm_constraints.CFMConstraints.update_constraints","title":"update_constraints","text":"<pre><code>update_constraints(constraints: List[Constraint])\n</code></pre> <p>Update the constraints displayed in the treeview.</p> <p>Parameters:</p> Source code in <code>cfmtoolbox_editor/ui/cfm_constraints.py</code> <pre><code>def update_constraints(self, constraints: List[Constraint]):\n    \"\"\"\n    Update the constraints displayed in the treeview.\n\n    Args:\n        constraints (List[Constraint]): The list of constraints to display.\n    \"\"\"\n    self.constraints_tree.delete(*self.constraints_tree.get_children())\n    self.constraint_mapping = {}\n    for constraint in constraints:\n        constraint_id = self.constraints_tree.insert(\n            \"\",\n            \"end\",\n            values=(\n                constraint.first_feature.name,\n                cardinality_to_display_str(constraint.first_cardinality, \"\u27e8\", \"\u27e9\"),\n                \"requires\" if constraint.require else \"excludes\",\n                constraint.second_feature.name,\n                cardinality_to_display_str(constraint.second_cardinality, \"\u27e8\", \"\u27e9\"),\n                \"\ud83d\udd89\",\n                \"\ud83d\uddd1\ufe0f\",\n            ),\n        )\n        self.constraint_mapping[constraint_id] = constraint\n</code></pre>"},{"location":"framework/api/ui/constraints/#cfmtoolbox_editor.ui.cfm_constraints.CFMConstraints.update_constraints(constraints)","title":"<code>constraints</code>","text":"(<code>List[Constraint]</code>)           \u2013            <p>The list of constraints to display.</p>"},{"location":"framework/api/ui/dialogs/","title":"Constraints Dialog API","text":""},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.constraint_dialog","title":"constraint_dialog","text":"<p>This module defines the ConstraintDialog class, which is responsible for creating and managing a dialog for adding or editing constraints in a feature model using the Tkinter library.</p> <p>Classes:</p> <ul> <li> <code>ConstraintDialog</code>           \u2013            <p>A class to create and manage a dialog for adding or editing constraints.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>ConstraintDialog</code>           \u2013            </li> </ul>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.constraint_dialog.ConstraintDialog","title":"ConstraintDialog","text":"<pre><code>ConstraintDialog(\n    parent_widget,\n    editor,\n    constraint=None,\n    initial_first_feature=None,\n    initial_second_feature=None,\n)\n</code></pre> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>create_widgets</code>             \u2013              <p>Create the widgets for the dialog.</p> </li> <li> <code>on_submit</code>             \u2013              <p>Handle the submission of the dialog, creating or updating the constraint.</p> </li> <li> <code>populate_initial_values</code>             \u2013              <p>Populate the initial values in the dialog based on the provided constraint or initial features.</p> </li> <li> <code>setup_dialog</code>             \u2013              <p>Set up the dialog window and its widgets.</p> </li> <li> <code>show</code>             \u2013              <p>Show the dialog and wait for it to be closed.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/ui/constraint_dialog.py</code> <pre><code>def __init__(\n    self,\n    parent_widget,\n    editor,\n    constraint=None,\n    initial_first_feature=None,\n    initial_second_feature=None,\n):\n    \"\"\"\n    Initialize the ConstraintDialog with the specified parameters.\n\n    Args:\n        parent_widget (tk.Widget): The parent widget for the dialog.\n        editor: The editor instance managing the feature model.\n        constraint (Constraint, optional): The constraint to edit. Defaults to None.\n        initial_first_feature (Feature, optional): The first feature to preselect. Defaults to None.\n        initial_second_feature (Feature, optional): The second feature to preselect. Defaults to None.\n    \"\"\"\n    self.parent_widget = parent_widget\n    self.editor = editor\n    self.constraint = constraint\n    self.initial_first_feature = initial_first_feature\n    self.initial_second_feature = initial_second_feature\n    self.result = None\n\n    # Initialize instance attributes\n    self.dialog = None\n    self.first_feature_var = StringVar()\n    self.first_card_var = StringVar()\n    self.type_var = StringVar(value=\"requires\")\n    self.second_feature_var = StringVar()\n    self.second_card_var = StringVar()\n    self.first_feature_dropdown = None\n    self.second_feature_dropdown = None\n    self.type_dropdown = None\n\n    # Set up the dialog\n    self.setup_dialog()\n</code></pre>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.constraint_dialog.ConstraintDialog(parent_widget)","title":"<code>parent_widget</code>","text":"(<code>Widget</code>)           \u2013            <p>The parent widget for the dialog.</p>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.constraint_dialog.ConstraintDialog(editor)","title":"<code>editor</code>","text":"\u2013            <p>The editor instance managing the feature model.</p>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.constraint_dialog.ConstraintDialog(constraint)","title":"<code>constraint</code>","text":"(<code>Constraint</code>, default:                   <code>None</code> )           \u2013            <p>The constraint to edit. Defaults to None.</p>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.constraint_dialog.ConstraintDialog(initial_first_feature)","title":"<code>initial_first_feature</code>","text":"(<code>Feature</code>, default:                   <code>None</code> )           \u2013            <p>The first feature to preselect. Defaults to None.</p>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.constraint_dialog.ConstraintDialog(initial_second_feature)","title":"<code>initial_second_feature</code>","text":"(<code>Feature</code>, default:                   <code>None</code> )           \u2013            <p>The second feature to preselect. Defaults to None.</p>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.constraint_dialog.ConstraintDialog.create_widgets","title":"create_widgets","text":"<pre><code>create_widgets()\n</code></pre> <p>Create the widgets for the dialog.</p> Source code in <code>cfmtoolbox_editor/ui/constraint_dialog.py</code> <pre><code>def create_widgets(self):\n    \"\"\"\n    Create the widgets for the dialog.\n    \"\"\"\n    feature_names = [feature.name for feature in self.editor.cfm.features]\n    feature_names.sort(key=str.casefold)\n\n    self.first_feature_var = StringVar()\n    self.first_card_var = StringVar()\n    self.type_var = StringVar(value=\"requires\")\n    self.second_feature_var = StringVar()\n    self.second_card_var = StringVar()\n\n    tk.Label(self.dialog, text=\"First Feature:\").grid(\n        row=0, column=0, padx=5, sticky=\"w\"\n    )\n    self.first_feature_dropdown = ttk.Combobox(\n        self.dialog,\n        textvariable=self.first_feature_var,\n        values=feature_names,\n        state=\"readonly\",\n    )\n    self.first_feature_dropdown.grid(row=1, column=0, padx=5)\n\n    tk.Label(self.dialog, text=\"Cardinality:\").grid(\n        row=0, column=1, padx=5, sticky=\"w\"\n    )\n    tk.Entry(self.dialog, textvariable=self.first_card_var).grid(\n        row=1, column=1, padx=5\n    )\n\n    tk.Label(self.dialog, text=\"Constraint Type:\").grid(\n        row=0, column=2, padx=5, sticky=\"w\"\n    )\n    self.type_dropdown = ttk.Combobox(\n        self.dialog,\n        textvariable=self.type_var,\n        values=[\"requires\", \"excludes\"],\n        state=\"readonly\",\n    )\n    self.type_dropdown.grid(row=1, column=2, padx=5)\n\n    tk.Label(self.dialog, text=\"Second Feature:\").grid(\n        row=0, column=3, padx=5, sticky=\"w\"\n    )\n    self.second_feature_dropdown = ttk.Combobox(\n        self.dialog,\n        textvariable=self.second_feature_var,\n        values=feature_names,\n        state=\"readonly\",\n    )\n    self.second_feature_dropdown.grid(row=1, column=3, padx=5)\n\n    tk.Label(self.dialog, text=\"Cardinality:\").grid(\n        row=0, column=4, padx=5, sticky=\"w\"\n    )\n    tk.Entry(self.dialog, textvariable=self.second_card_var).grid(\n        row=1, column=4, padx=5\n    )\n\n    tk.Button(self.dialog, text=\"Save\", command=self.on_submit).grid(\n        row=2, column=2, pady=10\n    )\n</code></pre>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.constraint_dialog.ConstraintDialog.on_submit","title":"on_submit","text":"<pre><code>on_submit()\n</code></pre> <p>Handle the submission of the dialog, creating or updating the constraint.</p> Source code in <code>cfmtoolbox_editor/ui/constraint_dialog.py</code> <pre><code>def on_submit(self):\n    \"\"\"\n    Handle the submission of the dialog, creating or updating the constraint.\n    \"\"\"\n    selected_first_feature = self.first_feature_var.get().strip()\n    selected_second_feature = self.second_feature_var.get().strip()\n    if not selected_first_feature or not selected_second_feature:\n        messagebox.showerror(\"Input Error\", \"Both features must be selected.\")\n        return\n\n    first_feature = self.editor.get_feature_by_name(selected_first_feature)\n    second_feature = self.editor.get_feature_by_name(selected_second_feature)\n    if first_feature == second_feature:\n        messagebox.showerror(\n            \"Input Error\", \"The first and second features cannot be the same.\"\n        )\n        return\n\n    try:\n        first_card = edit_str_to_cardinality(self.first_card_var.get().strip())\n        second_card = edit_str_to_cardinality(self.second_card_var.get().strip())\n    except ValueError:\n        messagebox.showerror(\"Input Error\", \"Invalid cardinality format.\")\n        return\n\n    require = self.type_var.get() == \"requires\"\n\n    if self.constraint:\n        self.constraint.first_feature = first_feature\n        self.constraint.second_feature = second_feature\n        self.constraint.first_cardinality = first_card\n        self.constraint.second_cardinality = second_card\n        self.constraint.require = require\n    else:\n        self.result = Constraint(\n            require=require,\n            first_feature=first_feature,\n            first_cardinality=first_card,\n            second_feature=second_feature,\n            second_cardinality=second_card,\n        )\n    self.dialog.destroy()\n</code></pre>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.constraint_dialog.ConstraintDialog.populate_initial_values","title":"populate_initial_values","text":"<pre><code>populate_initial_values()\n</code></pre> <p>Populate the initial values in the dialog based on the provided constraint or initial features.</p> Source code in <code>cfmtoolbox_editor/ui/constraint_dialog.py</code> <pre><code>def populate_initial_values(self):\n    \"\"\"\n    Populate the initial values in the dialog based on the provided constraint or initial features.\n    \"\"\"\n    if self.constraint:\n        self.first_feature_var.set(self.constraint.first_feature.name)\n        self.second_feature_var.set(self.constraint.second_feature.name)\n        self.first_card_var.set(\n            cardinality_to_edit_str(self.constraint.first_cardinality)\n        )\n        self.second_card_var.set(\n            cardinality_to_edit_str(self.constraint.second_cardinality)\n        )\n        self.type_var.set(\"requires\" if self.constraint.require else \"excludes\")\n    else:\n        self.first_feature_var.set(\n            self.initial_first_feature.name if self.initial_first_feature else \"\"\n        )\n        self.second_feature_var.set(\n            self.initial_second_feature.name if self.initial_second_feature else \"\"\n        )\n</code></pre>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.constraint_dialog.ConstraintDialog.setup_dialog","title":"setup_dialog","text":"<pre><code>setup_dialog()\n</code></pre> <p>Set up the dialog window and its widgets.</p> Source code in <code>cfmtoolbox_editor/ui/constraint_dialog.py</code> <pre><code>def setup_dialog(self):\n    \"\"\"\n    Set up the dialog window and its widgets.\n    \"\"\"\n    self.dialog = tk.Toplevel(self.parent_widget)\n    self.dialog.title(\"Edit Constraint\" if self.constraint else \"Add Constraint\")\n    self.dialog.geometry(\"750x100\")\n    self.dialog.transient(self.parent_widget)\n    self.dialog.grab_set()\n\n    self.create_widgets()\n    self.dialog.update_idletasks()\n    x, y = center_window(\n        self.parent_widget, self.dialog.winfo_width(), self.dialog.winfo_height()\n    )\n    self.dialog.geometry(f\"+{x}+{y}\")\n    self.populate_initial_values()\n</code></pre>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.constraint_dialog.ConstraintDialog.show","title":"show","text":"<pre><code>show()\n</code></pre> <p>Show the dialog and wait for it to be closed.</p> <p>Returns:</p> <ul> <li> <code>Constraint</code>          \u2013            <p>The created or edited constraint, or None if the dialog was cancelled.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/ui/constraint_dialog.py</code> <pre><code>def show(self):\n    \"\"\"\n    Show the dialog and wait for it to be closed.\n\n    Returns:\n        Constraint: The created or edited constraint, or None if the dialog was cancelled.\n    \"\"\"\n    self.dialog.wait_window()\n    return self.result\n</code></pre>"},{"location":"framework/api/ui/dialogs/#delete-feature-dialog-api","title":"Delete Feature Dialog API","text":""},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.delete_feature_dialog","title":"delete_feature_dialog","text":"<p>This module defines the DeleteFeatureDialog class, which is responsible for creating and managing a dialog for deleting a feature in a feature model using the Tkinter library. The dialog allows the user to either delete the entire subtree or transfer the children to the parent feature.</p> <p>Classes:</p> <ul> <li> <code>DeleteFeatureDialog</code>           \u2013            <p>A class to create and manage a dialog for deleting a feature.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>DeleteFeatureDialog</code>           \u2013            </li> </ul>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.delete_feature_dialog.DeleteFeatureDialog","title":"DeleteFeatureDialog","text":"<pre><code>DeleteFeatureDialog(\n    parent_widget,\n    feature: Feature,\n    cfm,\n    update_model_state_callback,\n    show_feature_dialog_callback,\n)\n</code></pre> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>create_dialog</code>             \u2013              <p>Creates and displays the dialog.</p> </li> <li> <code>submit</code>             \u2013              <p>Handles the deletion logic based on the user's choice.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/ui/delete_feature_dialog.py</code> <pre><code>def __init__(\n    self,\n    parent_widget,\n    feature: Feature,\n    cfm,\n    update_model_state_callback,\n    show_feature_dialog_callback,\n):\n    \"\"\"\n    Dialog for deleting a feature. Allows the user to either delete the subtree or transfer children to the parent.\n\n    Args:\n        parent_widget: The parent Tk widget (e.g., root window).\n        feature (Feature): The feature to delete.\n        cfm: The CFM model, containing constraints and features.\n        update_model_state_callback (callable): Function to update the model state after modifications.\n        show_feature_dialog_callback (callable): Function to open the feature dialog for editing.\n    \"\"\"\n    self.parent_widget = parent_widget\n    self.feature = feature\n    self.cfm = cfm\n    self.update_model_state = update_model_state_callback\n    self.show_feature_dialog = show_feature_dialog_callback\n    self.dialog = None\n    self.result = None\n\n    self.create_dialog()\n</code></pre>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.delete_feature_dialog.DeleteFeatureDialog(parent_widget)","title":"<code>parent_widget</code>","text":"\u2013            <p>The parent Tk widget (e.g., root window).</p>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.delete_feature_dialog.DeleteFeatureDialog(feature)","title":"<code>feature</code>","text":"(<code>Feature</code>)           \u2013            <p>The feature to delete.</p>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.delete_feature_dialog.DeleteFeatureDialog(cfm)","title":"<code>cfm</code>","text":"\u2013            <p>The CFM model, containing constraints and features.</p>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.delete_feature_dialog.DeleteFeatureDialog(update_model_state_callback)","title":"<code>update_model_state_callback</code>","text":"(<code>callable</code>)           \u2013            <p>Function to update the model state after modifications.</p>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.delete_feature_dialog.DeleteFeatureDialog(show_feature_dialog_callback)","title":"<code>show_feature_dialog_callback</code>","text":"(<code>callable</code>)           \u2013            <p>Function to open the feature dialog for editing.</p>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.delete_feature_dialog.DeleteFeatureDialog.create_dialog","title":"create_dialog","text":"<pre><code>create_dialog()\n</code></pre> <p>Creates and displays the dialog.</p> Source code in <code>cfmtoolbox_editor/ui/delete_feature_dialog.py</code> <pre><code>def create_dialog(self):\n    \"\"\"\n    Creates and displays the dialog.\n    \"\"\"\n    self.dialog = tk.Toplevel(self.parent_widget)\n    self.dialog.title(\"Delete Feature\")\n    self.dialog.geometry(\"300x150\")\n    self.dialog.transient(self.parent_widget)\n    self.dialog.grab_set()\n\n    label = tk.Label(\n        self.dialog,\n        text=(\n            f\"Choose the delete method for feature {self.feature.name}. \"\n            f\"Delete subtree will also delete all descendants, transfer will attach them to their grandparent.\"\n        ),\n        wraplength=280,\n        justify=\"left\",\n    )\n    label.pack(pady=10)\n\n    button_frame = tk.Frame(self.dialog)\n    button_frame.pack(pady=10)\n\n    tk.Button(\n        button_frame, text=\"Delete subtree\", command=lambda: self.submit(True)\n    ).pack(side=\"left\", padx=5)\n    tk.Button(\n        button_frame, text=\"Transfer\", command=lambda: self.submit(False)\n    ).pack(side=\"left\", padx=5)\n    tk.Button(button_frame, text=\"Cancel\", command=self.dialog.destroy).pack(\n        side=\"left\", padx=5\n    )\n\n    self.dialog.update_idletasks()\n    x, y = center_window(\n        self.parent_widget, self.dialog.winfo_width(), self.dialog.winfo_height()\n    )\n    self.dialog.geometry(f\"+{x}+{y}\")\n    self.dialog.wait_window(self.dialog)\n</code></pre>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.delete_feature_dialog.DeleteFeatureDialog.submit","title":"submit","text":"<pre><code>submit(delete_subtree: bool)\n</code></pre> <p>Handles the deletion logic based on the user's choice.</p> <p>Parameters:</p> Source code in <code>cfmtoolbox_editor/ui/delete_feature_dialog.py</code> <pre><code>def submit(self, delete_subtree: bool):\n    \"\"\"\n    Handles the deletion logic based on the user's choice.\n\n    Args:\n        delete_subtree (bool): If True, delete the entire subtree. If False, transfer children to the parent.\n    \"\"\"\n    parent = self.feature.parent\n    if not parent:\n        messagebox.showerror(\"Error\", \"Cannot delete root feature.\")\n        if self.dialog:\n            self.dialog.destroy()\n        return\n\n    former_number_of_children = len(parent.children)\n\n    if delete_subtree:\n        # Remove all constraints that involve children of the feature\n        self.cfm.constraints = [\n            c\n            for c in self.cfm.constraints\n            if c.first_feature not in self.feature.children\n            and c.second_feature not in self.feature.children\n        ]\n    else:\n        # Transfer children to the parent\n        index = parent.children.index(self.feature)\n        for child in reversed(self.feature.children):\n            parent.children.insert(index, child)\n            child.parent = parent\n\n    parent.children.remove(self.feature)\n\n    # Remove constraints involving the feature itself\n    self.cfm.constraints = [\n        c\n        for c in self.cfm.constraints\n        if c.first_feature != self.feature and c.second_feature != self.feature\n    ]\n\n    group_created = False\n    if len(parent.children) == 0:\n        parent.group_type_cardinality, parent.group_instance_cardinality = (\n            Cardinality([]),\n            Cardinality([]),\n        )\n    elif len(parent.children) == 1:\n        parent.group_type_cardinality, parent.group_instance_cardinality = (\n            derive_parent_group_cards_for_one_child(\n                parent.children[0].instance_cardinality\n            )\n        )\n    elif len(parent.children) == 2 and former_number_of_children &lt; 2:\n        parent.group_type_cardinality, parent.group_instance_cardinality = (\n            derive_parent_group_cards_for_multiple_children(\n                [child.instance_cardinality for child in parent.children]\n            )\n        )\n        group_created = True\n\n    self.update_model_state()\n    if self.dialog:\n        self.dialog.destroy()\n\n    if group_created:\n        messagebox.showinfo(\n            \"Group Created\",\n            \"A new group was created. You can edit its cardinalities now.\",\n        )\n        self.show_feature_dialog(feature=parent)\n</code></pre>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.delete_feature_dialog.DeleteFeatureDialog.submit(delete_subtree)","title":"<code>delete_subtree</code>","text":"(<code>bool</code>)           \u2013            <p>If True, delete the entire subtree. If False, transfer children to the parent.</p>"},{"location":"framework/api/ui/dialogs/#feature-dialog-api","title":"Feature Dialog API","text":""},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.feature_dialog","title":"feature_dialog","text":"<p>This module defines the FeatureDialog class, which is responsible for creating and managing a dialog for adding or editing features in a feature model using the Tkinter library.</p> <p>Classes:</p> <ul> <li> <code>FeatureDialog</code>           \u2013            <p>A class to create and manage a dialog for adding or editing features.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>FeatureDialog</code>           \u2013            <p>A dialog for adding or editing features in a feature model.</p> </li> </ul>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.feature_dialog.FeatureDialog","title":"FeatureDialog","text":"<pre><code>FeatureDialog(\n    parent_widget,\n    cfm,\n    add_expanded_feature_callback,\n    update_model_state_callback,\n    show_feature_dialog_callback,\n    parent_feature=None,\n    feature=None,\n)\n</code></pre> <p>A dialog for adding or editing features in a feature model.</p> <p>This dialog allows users to input or edit a feature's name, cardinality, and group cardinalities (if applicable). It supports validation for unique names and correct cardinality formats. Automatically adjusts parent group cardinalities when necessary and provides feedback if a new group is created.</p> <p>Attributes:</p> <ul> <li> <code>parent</code>           \u2013            <p>The Tk root window or parent widget.</p> </li> <li> <code>cfm</code>           \u2013            <p>The feature model containing the list of features.</p> </li> <li> <code>expanded_features</code>           \u2013            <p>Dictionary of feature IDs to expanded/collapsed states.</p> </li> <li> <code>update_model_state_callback</code>           \u2013            <p>Callback to update the model state.</p> </li> <li> <code>show_feature_dialog_callback</code>           \u2013            <p>Callback to reopen the dialog for a parent feature.</p> </li> <li> <code>parent_feature</code>           \u2013            <p>The parent feature for the new feature (if adding).</p> </li> <li> <code>feature</code>           \u2013            <p>The feature being edited (if applicable).</p> </li> </ul> <p>Parameters:</p> <ul> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> </ul> Source code in <code>cfmtoolbox_editor/ui/feature_dialog.py</code> <pre><code>def __init__(\n    self,\n    parent_widget,\n    cfm,\n    add_expanded_feature_callback,\n    update_model_state_callback,\n    show_feature_dialog_callback,\n    parent_feature=None,\n    feature=None,\n):\n    \"\"\"\n    Initialize the FeatureDialog with the specified parameters.\n\n    Args:\n        parent_widget (tk.Widget): The parent widget for the dialog.\n        cfm: The feature model containing the list of features.\n        add_expanded_feature_callback (callable): Callback to mark a feature as expanded.\n        update_model_state_callback (callable): Callback to update the model state.\n        show_feature_dialog_callback (callable): Callback to reopen the dialog for a parent feature.\n        parent_feature (Feature, optional): The parent feature for the new feature. Defaults to None.\n        feature (Feature, optional): The feature being edited. Defaults to None.\n    \"\"\"\n    self.parent_widget = parent_widget  # The Tk root window or parent widget\n    self.cfm = cfm\n    self.add_expanded_feature_callback = add_expanded_feature_callback\n    self.update_model_state_callback = update_model_state_callback\n    self.show_feature_dialog_callback = show_feature_dialog_callback\n    self.parent_feature = parent_feature\n    self.feature = feature\n\n    self.is_edit = feature is not None\n    self.is_group = feature is not None and len(feature.children) &gt; 1\n    self.is_only_child = (\n        feature is not None and feature.parent and len(feature.parent.children) == 1\n    )\n\n    self.dialog = Toplevel(self.parent_widget)\n    self.dialog.title(\"Edit Feature\" if self.is_edit else \"Add Feature\")\n    self.dialog.transient(self.parent_widget)\n    self.dialog.grab_set()\n\n    self._create_widgets()\n    self.dialog.update_idletasks()\n    x, y = center_window(\n        self.parent_widget, self.dialog.winfo_width(), self.dialog.winfo_height()\n    )\n    self.dialog.geometry(f\"+{x}+{y}\")\n    self.dialog.wait_window(self.dialog)\n</code></pre>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.feature_dialog.FeatureDialog(parent_widget)","title":"<code>parent_widget</code>","text":"(<code>Widget</code>)           \u2013            <p>The parent widget for the dialog.</p>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.feature_dialog.FeatureDialog(cfm)","title":"<code>cfm</code>","text":"\u2013            <p>The feature model containing the list of features.</p>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.feature_dialog.FeatureDialog(add_expanded_feature_callback)","title":"<code>add_expanded_feature_callback</code>","text":"(<code>callable</code>)           \u2013            <p>Callback to mark a feature as expanded.</p>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.feature_dialog.FeatureDialog(update_model_state_callback)","title":"<code>update_model_state_callback</code>","text":"(<code>callable</code>)           \u2013            <p>Callback to update the model state.</p>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.feature_dialog.FeatureDialog(show_feature_dialog_callback)","title":"<code>show_feature_dialog_callback</code>","text":"(<code>callable</code>)           \u2013            <p>Callback to reopen the dialog for a parent feature.</p>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.feature_dialog.FeatureDialog(parent_feature)","title":"<code>parent_feature</code>","text":"(<code>Feature</code>, default:                   <code>None</code> )           \u2013            <p>The parent feature for the new feature. Defaults to None.</p>"},{"location":"framework/api/ui/dialogs/#cfmtoolbox_editor.ui.feature_dialog.FeatureDialog(feature)","title":"<code>feature</code>","text":"(<code>Feature</code>, default:                   <code>None</code> )           \u2013            <p>The feature being edited. Defaults to None.</p>"},{"location":"framework/api/ui/menubar/","title":"Menubar API","text":""},{"location":"framework/api/ui/menubar/#cfmtoolbox_editor.ui.cfm_menubar","title":"cfm_menubar","text":"<p>This module defines the CFMMenuBar class, which is responsible for creating and managing the menu bar in the feature model editor using the Tkinter library. The CFMMenuBar class provides functionalities to add menu items for file operations, editing features, and managing constraints.</p> <p>Classes:</p> <ul> <li> <code>CFMMenuBar</code>           \u2013            <p>A class to create and manage the menu bar for the feature model editor.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>CFMMenuBar</code>           \u2013            </li> </ul>"},{"location":"framework/api/ui/menubar/#cfmtoolbox_editor.ui.cfm_menubar.CFMMenuBar","title":"CFMMenuBar","text":"<pre><code>CFMMenuBar(root, editor)\n</code></pre> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>get_menubar</code>             \u2013              <p>Get the menu bar widget.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/ui/cfm_menubar.py</code> <pre><code>def __init__(self, root, editor):\n    \"\"\"\n    Initialize the CFMMenuBar with the root Tkinter window and the editor instance.\n\n    Args:\n        root (tk.Tk): The root Tkinter window.\n        editor: The editor instance managing the feature model.\n    \"\"\"\n    self.root = root\n    self.editor = editor\n    self.menubar = Menu(root)\n    self.shortcut_manager = editor.shortcut_manager\n    self._create_menus()\n</code></pre>"},{"location":"framework/api/ui/menubar/#cfmtoolbox_editor.ui.cfm_menubar.CFMMenuBar(root)","title":"<code>root</code>","text":"(<code>Tk</code>)           \u2013            <p>The root Tkinter window.</p>"},{"location":"framework/api/ui/menubar/#cfmtoolbox_editor.ui.cfm_menubar.CFMMenuBar(editor)","title":"<code>editor</code>","text":"\u2013            <p>The editor instance managing the feature model.</p>"},{"location":"framework/api/ui/menubar/#cfmtoolbox_editor.ui.cfm_menubar.CFMMenuBar.get_menubar","title":"get_menubar","text":"<pre><code>get_menubar()\n</code></pre> <p>Get the menu bar widget.</p> <p>Returns:</p> <ul> <li> <code>Menu</code>          \u2013            <p>The menu bar widget.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/ui/cfm_menubar.py</code> <pre><code>def get_menubar(self):\n    \"\"\"\n    Get the menu bar widget.\n\n    Returns:\n        Menu: The menu bar widget.\n    \"\"\"\n    return self.menubar\n</code></pre>"},{"location":"framework/api/ui/tooltip/","title":"Tooltip API","text":""},{"location":"framework/api/ui/tooltip/#cfmtoolbox_editor.ui.cfm_tooltip","title":"cfm_tooltip","text":"<p>This module defines the ToolTip class, which is responsible for displaying tooltips when hovering over widgets or canvas items in the Tkinter library.</p> <p>Classes:</p> <ul> <li> <code>ToolTip</code>           \u2013            <p>A class to create and manage tooltips for Tkinter widgets and canvas items.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>ToolTip</code>           \u2013            <p>Tooltip class to show short texts when hovering a widget or canvas item.</p> </li> </ul>"},{"location":"framework/api/ui/tooltip/#cfmtoolbox_editor.ui.cfm_tooltip.ToolTip","title":"ToolTip","text":"<pre><code>ToolTip(widget)\n</code></pre> <p>Tooltip class to show short texts when hovering a widget or canvas item.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>hide_tip</code>             \u2013              <p>Hide the tooltip.</p> </li> <li> <code>show_tip</code>             \u2013              <p>Show the tooltip with a specified text.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/ui/cfm_tooltip.py</code> <pre><code>def __init__(self, widget):\n    \"\"\"\n    Initialize the ToolTip with the specified widget.\n\n    Args:\n        widget (tk.Widget): The widget to attach the tooltip to.\n    \"\"\"\n    self.widget = widget\n    self.tip_window = None\n</code></pre>"},{"location":"framework/api/ui/tooltip/#cfmtoolbox_editor.ui.cfm_tooltip.ToolTip(widget)","title":"<code>widget</code>","text":"(<code>Widget</code>)           \u2013            <p>The widget to attach the tooltip to.</p>"},{"location":"framework/api/ui/tooltip/#cfmtoolbox_editor.ui.cfm_tooltip.ToolTip.hide_tip","title":"hide_tip","text":"<pre><code>hide_tip()\n</code></pre> <p>Hide the tooltip.</p> Source code in <code>cfmtoolbox_editor/ui/cfm_tooltip.py</code> <pre><code>def hide_tip(self):\n    \"\"\"\n    Hide the tooltip.\n    \"\"\"\n    if self.tip_window:\n        self.tip_window.destroy()\n        self.tip_window = None\n</code></pre>"},{"location":"framework/api/ui/tooltip/#cfmtoolbox_editor.ui.cfm_tooltip.ToolTip.show_tip","title":"show_tip","text":"<pre><code>show_tip(text, x_pos: int = 0, y_pos: int = 0)\n</code></pre> <p>Show the tooltip with a specified text.</p> <p>Parameters:</p> Source code in <code>cfmtoolbox_editor/ui/cfm_tooltip.py</code> <pre><code>def show_tip(self, text, x_pos: int = 0, y_pos: int = 0):\n    \"\"\"\n    Show the tooltip with a specified text.\n\n    Args:\n        text (str): Text to display in the tooltip.\n        x_pos (int): x coordinate relative to the widget.\n        y_pos (int): y coordinate relative to the widget.\n    \"\"\"\n    margin = 10\n\n    self.hide_tip()\n    if not text:\n        return\n\n    if isinstance(self.widget, tk.Canvas):  # Canvas item: Adjust for scrolling\n        x_scroll = self.widget.winfo_rootx() - self.widget.canvasx(0)\n        y_scroll = self.widget.winfo_rooty() - self.widget.canvasy(0)\n        x_pos += x_scroll + margin\n        y_pos += y_scroll + margin\n    else:\n        x, y, _, cy = self.widget.bbox(\"insert\")\n        x_pos += x + self.widget.winfo_rootx() + margin\n        y_pos += y + self.widget.winfo_rooty() + margin\n\n    self.tip_window = tw = tk.Toplevel(self.widget)\n    tw.wm_overrideredirect(True)\n    tw.geometry(f\"+{int(x_pos)}+{int(y_pos)}\")\n    label = ttk.Label(\n        tw,\n        text=text,\n        justify=tk.LEFT,\n        background=\"#ffffe0\",\n        relief=tk.SOLID,\n        borderwidth=1,\n        font=(\"tahoma\", 8, \"normal\"),\n    )\n    label.pack(ipadx=1)\n</code></pre>"},{"location":"framework/api/ui/tooltip/#cfmtoolbox_editor.ui.cfm_tooltip.ToolTip.show_tip(text)","title":"<code>text</code>","text":"(<code>str</code>)           \u2013            <p>Text to display in the tooltip.</p>"},{"location":"framework/api/ui/tooltip/#cfmtoolbox_editor.ui.cfm_tooltip.ToolTip.show_tip(x_pos)","title":"<code>x_pos</code>","text":"(<code>int</code>, default:                   <code>0</code> )           \u2013            <p>x coordinate relative to the widget.</p>"},{"location":"framework/api/ui/tooltip/#cfmtoolbox_editor.ui.cfm_tooltip.ToolTip.show_tip(y_pos)","title":"<code>y_pos</code>","text":"(<code>int</code>, default:                   <code>0</code> )           \u2013            <p>y coordinate relative to the widget.</p>"},{"location":"framework/api/utils/calc_graph_Layout/","title":"Calculate Graph Layout API","text":""},{"location":"framework/api/utils/calc_graph_Layout/#cfmtoolbox_editor.utils.cfm_editor_undo_redo","title":"cfm_editor_undo_redo","text":"<p>This module defines the UndoRedoManager class, which is responsible for managing the undo and redo functionality for the feature model editor.</p> <p>Classes:</p> <ul> <li> <code>UndoRedoManager</code>           \u2013            <p>A class to manage the undo and redo stacks for the feature model editor.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>UndoRedoManager</code>           \u2013            </li> </ul>"},{"location":"framework/api/utils/calc_graph_Layout/#cfmtoolbox_editor.utils.cfm_editor_undo_redo.UndoRedoManager","title":"UndoRedoManager","text":"<pre><code>UndoRedoManager()\n</code></pre> <p>Methods:</p> <ul> <li> <code>add_state</code>             \u2013              <p>Add a new state to the undo stack and clear the redo stack.</p> </li> <li> <code>redo</code>             \u2013              <p>Redo the last undone action and return the state.</p> </li> <li> <code>reset</code>             \u2013              <p>Reset the feature model to its initial state.</p> </li> <li> <code>set_initial_state</code>             \u2013              <p>Set the initial state of the feature model.</p> </li> <li> <code>undo</code>             \u2013              <p>Undo the last action and return the previous state.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/utils/cfm_editor_undo_redo.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Initialize the UndoRedoManager with empty undo and redo stacks.\n    \"\"\"\n    self.undo_stack: list[CFM] = []\n    self.redo_stack: list[CFM] = []\n    self.initial_state: CFM | None = None\n</code></pre>"},{"location":"framework/api/utils/calc_graph_Layout/#cfmtoolbox_editor.utils.cfm_editor_undo_redo.UndoRedoManager.add_state","title":"add_state","text":"<pre><code>add_state(cfm: CFM)\n</code></pre> <p>Add a new state to the undo stack and clear the redo stack.</p> <p>Parameters:</p> Source code in <code>cfmtoolbox_editor/utils/cfm_editor_undo_redo.py</code> <pre><code>def add_state(self, cfm: CFM):\n    \"\"\"\n    Add a new state to the undo stack and clear the redo stack.\n\n    Args:\n        cfm (CFM): The current state of the feature model.\n    \"\"\"\n    self.undo_stack.append(deepcopy(cfm))\n    self.redo_stack.clear()\n</code></pre>"},{"location":"framework/api/utils/calc_graph_Layout/#cfmtoolbox_editor.utils.cfm_editor_undo_redo.UndoRedoManager.add_state(cfm)","title":"<code>cfm</code>","text":"(<code>CFM</code>)           \u2013            <p>The current state of the feature model.</p>"},{"location":"framework/api/utils/calc_graph_Layout/#cfmtoolbox_editor.utils.cfm_editor_undo_redo.UndoRedoManager.redo","title":"redo","text":"<pre><code>redo() -&gt; CFM | None\n</code></pre> <p>Redo the last undone action and return the state.</p> <p>Returns:</p> <ul> <li> <code>CFM | None</code>           \u2013            <p>CFM | None: The redone state of the feature model, or None if no redo is possible.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/utils/cfm_editor_undo_redo.py</code> <pre><code>def redo(self) -&gt; CFM | None:\n    \"\"\"\n    Redo the last undone action and return the state.\n\n    Returns:\n        CFM | None: The redone state of the feature model, or None if no redo is possible.\n    \"\"\"\n    if self.redo_stack:\n        state = self.redo_stack.pop()\n        self.undo_stack.append(state)\n        return deepcopy(state)\n    return None\n</code></pre>"},{"location":"framework/api/utils/calc_graph_Layout/#cfmtoolbox_editor.utils.cfm_editor_undo_redo.UndoRedoManager.reset","title":"reset","text":"<pre><code>reset() -&gt; CFM\n</code></pre> <p>Reset the feature model to its initial state.</p> <p>Returns:</p> <ul> <li> <code>CFM</code> (              <code>CFM</code> )          \u2013            <p>The initial state of the feature model.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/utils/cfm_editor_undo_redo.py</code> <pre><code>def reset(self) -&gt; CFM:\n    \"\"\"\n    Reset the feature model to its initial state.\n\n    Returns:\n        CFM: The initial state of the feature model.\n    \"\"\"\n    assert self.initial_state is not None\n    self.add_state(self.initial_state)\n    return deepcopy(self.initial_state)\n</code></pre>"},{"location":"framework/api/utils/calc_graph_Layout/#cfmtoolbox_editor.utils.cfm_editor_undo_redo.UndoRedoManager.set_initial_state","title":"set_initial_state","text":"<pre><code>set_initial_state(cfm: CFM)\n</code></pre> <p>Set the initial state of the feature model.</p> <p>Parameters:</p> Source code in <code>cfmtoolbox_editor/utils/cfm_editor_undo_redo.py</code> <pre><code>def set_initial_state(self, cfm: CFM):\n    \"\"\"\n    Set the initial state of the feature model.\n\n    Args:\n        cfm (CFM): The initial state of the feature model.\n    \"\"\"\n    self.initial_state = deepcopy(cfm)\n</code></pre>"},{"location":"framework/api/utils/calc_graph_Layout/#cfmtoolbox_editor.utils.cfm_editor_undo_redo.UndoRedoManager.set_initial_state(cfm)","title":"<code>cfm</code>","text":"(<code>CFM</code>)           \u2013            <p>The initial state of the feature model.</p>"},{"location":"framework/api/utils/calc_graph_Layout/#cfmtoolbox_editor.utils.cfm_editor_undo_redo.UndoRedoManager.undo","title":"undo","text":"<pre><code>undo() -&gt; CFM | None\n</code></pre> <p>Undo the last action and return the previous state.</p> <p>Returns:</p> <ul> <li> <code>CFM | None</code>           \u2013            <p>CFM | None: The previous state of the feature model, or None if no undo is possible.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/utils/cfm_editor_undo_redo.py</code> <pre><code>def undo(self) -&gt; CFM | None:\n    \"\"\"\n    Undo the last action and return the previous state.\n\n    Returns:\n        CFM | None: The previous state of the feature model, or None if no undo is possible.\n    \"\"\"\n    if len(self.undo_stack) &gt; 1:\n        current_state = self.undo_stack.pop()\n        self.redo_stack.append(current_state)\n        return deepcopy(self.undo_stack[-1])\n    return None\n</code></pre>"},{"location":"framework/api/utils/click_handler/","title":"Click Handler API","text":""},{"location":"framework/api/utils/click_handler/#cfmtoolbox_editor.utils.cfm_click_handler","title":"cfm_click_handler","text":"<p>This module defines the CFMClickHandler class, which is responsible for handling click events in a cross-platform manner for the Tkinter library.</p> <p>Classes:</p> <ul> <li> <code>CFMClickHandler</code>           \u2013            <p>A class to handle left and right click events for different operating systems.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>CFMClickHandler</code>           \u2013            </li> </ul>"},{"location":"framework/api/utils/click_handler/#cfmtoolbox_editor.utils.cfm_click_handler.CFMClickHandler","title":"CFMClickHandler","text":"<pre><code>CFMClickHandler()\n</code></pre> <p>Methods:</p> <ul> <li> <code>left_click</code>             \u2013              <p>Returns the correct left-click event for the operating system.</p> </li> <li> <code>right_click</code>             \u2013              <p>Returns the correct right-click event for the operating system.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/utils/cfm_click_handler.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Initialize the CFMClickHandler and determine the operating system.\n    \"\"\"\n    self.is_mac = sys.platform == \"darwin\"\n</code></pre>"},{"location":"framework/api/utils/click_handler/#cfmtoolbox_editor.utils.cfm_click_handler.CFMClickHandler.left_click","title":"left_click","text":"<pre><code>left_click() -&gt; str\n</code></pre> <p>Returns the correct left-click event for the operating system.</p> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>The left-click event string.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/utils/cfm_click_handler.py</code> <pre><code>def left_click(self) -&gt; str:\n    \"\"\"\n    Returns the correct left-click event for the operating system.\n\n    Returns:\n        str: The left-click event string.\n    \"\"\"\n    return \"&lt;Button-1&gt;\"\n</code></pre>"},{"location":"framework/api/utils/click_handler/#cfmtoolbox_editor.utils.cfm_click_handler.CFMClickHandler.right_click","title":"right_click","text":"<pre><code>right_click() -&gt; str\n</code></pre> <p>Returns the correct right-click event for the operating system.</p> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>The right-click event string.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/utils/cfm_click_handler.py</code> <pre><code>def right_click(self) -&gt; str:\n    \"\"\"\n    Returns the correct right-click event for the operating system.\n\n    Returns:\n        str: The right-click event string.\n    \"\"\"\n    return \"&lt;Button-2&gt;\" if self.is_mac else \"&lt;Button-3&gt;\"\n</code></pre>"},{"location":"framework/api/utils/editor_undo_redo/","title":"Undo Redo API","text":""},{"location":"framework/api/utils/editor_undo_redo/#cfmtoolbox_editor.utils.cfm_utils","title":"cfm_utils","text":"<p>This module provides utility functions for handling cardinalities and positioning windows in the feature model editor using the Tkinter library.</p> <p>Functions:</p> <ul> <li> <code>cardinality_to_display_str</code>             \u2013              <p>Converts a cardinality to a string representation for display.</p> </li> <li> <code>cardinality_to_edit_str</code>             \u2013              <p>Converts a cardinality to a string representation for editing.</p> </li> <li> <code>edit_str_to_cardinality</code>             \u2013              <p>Converts a string representation of intervals to a Cardinality object.</p> </li> <li> <code>derive_parent_group_cards_for_one_child</code>             \u2013              <p>Derives parent group cardinalities for a single child.</p> </li> <li> <code>derive_parent_group_cards_for_multiple_children</code>             \u2013              <p>Derives parent group cardinalities for multiple children.</p> </li> <li> <code>center_window</code>             \u2013              <p>Calculates the position to center a window relative to a parent widget.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>cardinality_to_display_str</code>             \u2013              <p>Converts a cardinality to a string representation that is displayed in the editor.</p> </li> <li> <code>cardinality_to_edit_str</code>             \u2013              <p>Converts a cardinality to a string representation of the intervals that can be edited by the user.</p> </li> <li> <code>center_window</code>             \u2013              <p>Calculates the position of the window to appear centered relative to the parent widget.</p> </li> <li> <code>derive_parent_group_cards_for_multiple_children</code>             \u2013              <p>Derives the parent group cardinalities from the instance cardinalities of multiple children. Group type cardinality</p> </li> <li> <code>derive_parent_group_cards_for_one_child</code>             \u2013              <p>Derives the parent group cardinalities from the only child's instance cardinality. Group type cardinality is 0 if</p> </li> <li> <code>edit_str_to_cardinality</code>             \u2013              <p>Converts intervals entered by the user to a Cardinality object.</p> </li> </ul>"},{"location":"framework/api/utils/editor_undo_redo/#cfmtoolbox_editor.utils.cfm_utils.cardinality_to_display_str","title":"cardinality_to_display_str","text":"<pre><code>cardinality_to_display_str(\n    cardinality: Cardinality,\n    left_bracket: str,\n    right_bracket: str,\n) -&gt; str\n</code></pre> <p>Converts a cardinality to a string representation that is displayed in the editor.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>The string representation of the cardinality using the specified brackets.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/utils/cfm_utils.py</code> <pre><code>def cardinality_to_display_str(\n    cardinality: Cardinality, left_bracket: str, right_bracket: str\n) -&gt; str:\n    \"\"\"\n    Converts a cardinality to a string representation that is displayed in the editor.\n\n    Args:\n        cardinality (Cardinality): The cardinality to display.\n        left_bracket (str): The left symbol to use for the intervals.\n        right_bracket (str): The right symbol to use for the intervals.\n\n    Returns:\n        str: The string representation of the cardinality using the specified brackets.\n    \"\"\"\n    intervals = cardinality.intervals\n    if not intervals:\n        return f\"{left_bracket}{right_bracket}\"\n\n    return \", \".join(\n        f\"{left_bracket}{interval.lower}, {'*' if interval.upper is None else interval.upper}{right_bracket}\"\n        for interval in intervals\n    )\n</code></pre>"},{"location":"framework/api/utils/editor_undo_redo/#cfmtoolbox_editor.utils.cfm_utils.cardinality_to_display_str(cardinality)","title":"<code>cardinality</code>","text":"(<code>Cardinality</code>)           \u2013            <p>The cardinality to display.</p>"},{"location":"framework/api/utils/editor_undo_redo/#cfmtoolbox_editor.utils.cfm_utils.cardinality_to_display_str(left_bracket)","title":"<code>left_bracket</code>","text":"(<code>str</code>)           \u2013            <p>The left symbol to use for the intervals.</p>"},{"location":"framework/api/utils/editor_undo_redo/#cfmtoolbox_editor.utils.cfm_utils.cardinality_to_display_str(right_bracket)","title":"<code>right_bracket</code>","text":"(<code>str</code>)           \u2013            <p>The right symbol to use for the intervals.</p>"},{"location":"framework/api/utils/editor_undo_redo/#cfmtoolbox_editor.utils.cfm_utils.cardinality_to_edit_str","title":"cardinality_to_edit_str","text":"<pre><code>cardinality_to_edit_str(cardinality: Cardinality) -&gt; str\n</code></pre> <p>Converts a cardinality to a string representation of the intervals that can be edited by the user.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>A string representation of the intervals separating bounds by comma and intervals by semicolon.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/utils/cfm_utils.py</code> <pre><code>def cardinality_to_edit_str(cardinality: Cardinality) -&gt; str:\n    \"\"\"\n    Converts a cardinality to a string representation of the intervals that can be edited by the user.\n\n    Args:\n        cardinality (Cardinality): The cardinality to convert.\n\n    Returns:\n        str: A string representation of the intervals separating bounds by comma and intervals by semicolon.\n    \"\"\"\n    return \"; \".join(\n        f\"{interval.lower},{'*' if interval.upper is None else interval.upper}\"\n        for interval in cardinality.intervals\n    )\n</code></pre>"},{"location":"framework/api/utils/editor_undo_redo/#cfmtoolbox_editor.utils.cfm_utils.cardinality_to_edit_str(cardinality)","title":"<code>cardinality</code>","text":"(<code>Cardinality</code>)           \u2013            <p>The cardinality to convert.</p>"},{"location":"framework/api/utils/editor_undo_redo/#cfmtoolbox_editor.utils.cfm_utils.center_window","title":"center_window","text":"<pre><code>center_window(\n    parent_widget: Widget,\n    window_width: int,\n    window_height: int,\n) -&gt; Tuple[int, int]\n</code></pre> <p>Calculates the position of the window to appear centered relative to the parent widget.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Tuple[int, int]</code>           \u2013            <p>Tuple[int, int]: The x and y coordinate of the top left corner of the window.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/utils/cfm_utils.py</code> <pre><code>def center_window(\n    parent_widget: tk.Widget, window_width: int, window_height: int\n) -&gt; Tuple[int, int]:\n    \"\"\"\n    Calculates the position of the window to appear centered relative to the parent widget.\n\n    Args:\n        parent_widget (tk.Widget): The widget in which to center the window.\n        window_width (int): The width of the window in pixels.\n        window_height (int): The height of the window in pixels.\n\n    Returns:\n        Tuple[int, int]: The x and y coordinate of the top left corner of the window.\n    \"\"\"\n    parent_widget.update_idletasks()\n    main_window_x = parent_widget.winfo_x()\n    main_window_y = parent_widget.winfo_y()\n    main_window_width = parent_widget.winfo_width()\n    main_window_height = parent_widget.winfo_height()\n\n    window_x = main_window_x + (main_window_width // 2) - (window_width // 2)\n    window_y = main_window_y + (main_window_height // 2) - (window_height // 2)\n\n    return window_x, window_y\n</code></pre>"},{"location":"framework/api/utils/editor_undo_redo/#cfmtoolbox_editor.utils.cfm_utils.center_window(parent_widget)","title":"<code>parent_widget</code>","text":"(<code>Widget</code>)           \u2013            <p>The widget in which to center the window.</p>"},{"location":"framework/api/utils/editor_undo_redo/#cfmtoolbox_editor.utils.cfm_utils.center_window(window_width)","title":"<code>window_width</code>","text":"(<code>int</code>)           \u2013            <p>The width of the window in pixels.</p>"},{"location":"framework/api/utils/editor_undo_redo/#cfmtoolbox_editor.utils.cfm_utils.center_window(window_height)","title":"<code>window_height</code>","text":"(<code>int</code>)           \u2013            <p>The height of the window in pixels.</p>"},{"location":"framework/api/utils/editor_undo_redo/#cfmtoolbox_editor.utils.cfm_utils.derive_parent_group_cards_for_multiple_children","title":"derive_parent_group_cards_for_multiple_children","text":"<pre><code>derive_parent_group_cards_for_multiple_children(\n    child_instance_cards: List[Cardinality],\n) -&gt; Tuple[Cardinality, Cardinality]\n</code></pre> <p>Derives the parent group cardinalities from the instance cardinalities of multiple children. Group type cardinality is [mandatory children, all children]. Group instance cardinality is  of the children. <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Tuple[Cardinality, Cardinality]</code>           \u2013            <p>Tuple[Cardinality, Cardinality]: (Group type cardinality, Group instance cardinality) of the parent group.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/utils/cfm_utils.py</code> <pre><code>def derive_parent_group_cards_for_multiple_children(\n    child_instance_cards: List[Cardinality],\n) -&gt; Tuple[Cardinality, Cardinality]:\n    \"\"\"\n    Derives the parent group cardinalities from the instance cardinalities of multiple children. Group type cardinality\n    is [mandatory children, all children]. Group instance cardinality is &lt;sum of minimum lower bounds, sum of maximum\n    upper bounds&gt; of the children.\n\n    Args:\n        child_instance_cards (List[Cardinality]): The feature instance cardinalities of the children.\n\n    Returns:\n        Tuple[Cardinality, Cardinality]: (Group type cardinality, Group instance cardinality) of the parent group.\n    \"\"\"\n    lower_group_type = len(\n        [\n            card\n            for card in child_instance_cards\n            if not any(interval.lower == 0 for interval in card.intervals)\n        ]\n    )\n    upper_group_type = len(child_instance_cards)\n    lower_group_instance = sum(\n        min(interval.lower for interval in card.intervals)\n        for card in child_instance_cards\n        if card.intervals\n    )\n    upper_group_instance = (\n        None\n        if any(\n            interval.upper is None\n            for card in child_instance_cards\n            for interval in card.intervals\n        )\n        else sum(\n            max(\n                interval.upper\n                for interval in card.intervals\n                if interval.upper is not None\n            )\n            for card in child_instance_cards\n            if card.intervals\n        )\n    )\n    return (\n        Cardinality([Interval(lower_group_type, upper_group_type)]),\n        Cardinality([Interval(lower_group_instance, upper_group_instance)]),\n    )\n</code></pre>"},{"location":"framework/api/utils/editor_undo_redo/#cfmtoolbox_editor.utils.cfm_utils.derive_parent_group_cards_for_multiple_children(child_instance_cards)","title":"<code>child_instance_cards</code>","text":"(<code>List[Cardinality]</code>)           \u2013            <p>The feature instance cardinalities of the children.</p>"},{"location":"framework/api/utils/editor_undo_redo/#cfmtoolbox_editor.utils.cfm_utils.derive_parent_group_cards_for_one_child","title":"derive_parent_group_cards_for_one_child","text":"<pre><code>derive_parent_group_cards_for_one_child(\n    child_instance_card: Cardinality,\n) -&gt; Tuple[Cardinality, Cardinality]\n</code></pre> <p>Derives the parent group cardinalities from the only child's instance cardinality. Group type cardinality is 0 if the child can have 0 instances, 1 otherwise. Group instance cardinality is the same as the child's instance cardinality.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Tuple[Cardinality, Cardinality]</code>           \u2013            <p>Tuple[Cardinality, Cardinality]: (Group type cardinality, Group instance cardinality) of the parent group.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/utils/cfm_utils.py</code> <pre><code>def derive_parent_group_cards_for_one_child(\n    child_instance_card: Cardinality,\n) -&gt; Tuple[Cardinality, Cardinality]:\n    \"\"\"\n    Derives the parent group cardinalities from the only child's instance cardinality. Group type cardinality is 0 if\n    the child can have 0 instances, 1 otherwise. Group instance cardinality is the same as the child's instance\n    cardinality.\n\n    Args:\n        child_instance_card (Cardinality): The feature instance cardinality of a child with no siblings.\n\n    Returns:\n        Tuple[Cardinality, Cardinality]: (Group type cardinality, Group instance cardinality) of the parent group.\n    \"\"\"\n    lower_group_type = (\n        0\n        if any(interval.lower == 0 for interval in child_instance_card.intervals)\n        else 1\n    )\n    return Cardinality([Interval(lower_group_type, 1)]), Cardinality(\n        child_instance_card.intervals\n    )\n</code></pre>"},{"location":"framework/api/utils/editor_undo_redo/#cfmtoolbox_editor.utils.cfm_utils.derive_parent_group_cards_for_one_child(child_instance_card)","title":"<code>child_instance_card</code>","text":"(<code>Cardinality</code>)           \u2013            <p>The feature instance cardinality of a child with no siblings.</p>"},{"location":"framework/api/utils/editor_undo_redo/#cfmtoolbox_editor.utils.cfm_utils.edit_str_to_cardinality","title":"edit_str_to_cardinality","text":"<pre><code>edit_str_to_cardinality(\n    raw_cardinality: str,\n) -&gt; Cardinality\n</code></pre> <p>Converts intervals entered by the user to a Cardinality object.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Cardinality</code> (              <code>Cardinality</code> )          \u2013            <p>The Cardinality object constructed from the parsed intervals.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If the intervals are not formatted correctly (Bounds have to be ints or * separated by a comma, intervals are separated by a semicolon).</p> </li> </ul> Source code in <code>cfmtoolbox_editor/utils/cfm_utils.py</code> <pre><code>def edit_str_to_cardinality(raw_cardinality: str) -&gt; Cardinality:\n    \"\"\"\n    Converts intervals entered by the user to a Cardinality object.\n\n    Args:\n        raw_cardinality (str): The intervals to parse.\n\n    Returns:\n        Cardinality: The Cardinality object constructed from the parsed intervals.\n\n    Raises:\n        ValueError: If the intervals are not formatted correctly (Bounds have to be ints or * separated by a comma, intervals are separated by a semicolon).\n    \"\"\"\n    intervals = []\n    for interval in raw_cardinality.split(\";\"):\n        min_str, max_str = interval.split(\",\")\n        min_card = int(min_str.strip())\n        max_card = None if max_str.strip() == \"*\" else int(max_str.strip())\n        intervals.append(Interval(min_card, max_card))\n    return Cardinality(intervals)\n</code></pre>"},{"location":"framework/api/utils/editor_undo_redo/#cfmtoolbox_editor.utils.cfm_utils.edit_str_to_cardinality(raw_cardinality)","title":"<code>raw_cardinality</code>","text":"(<code>str</code>)           \u2013            <p>The intervals to parse.</p>"},{"location":"framework/api/utils/shortcuts/","title":"Shortcuts API","text":""},{"location":"framework/api/utils/shortcuts/#cfmtoolbox_editor.utils.cfm_shortcuts","title":"cfm_shortcuts","text":"<p>This module defines the ShortcutManager class, which is responsible for managing keyboard shortcuts for the feature model editor using the Tkinter library.</p> <p>Classes:</p> <ul> <li> <code>ShortcutManager</code>           \u2013            <p>A class to manage keyboard shortcuts for the feature model editor.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>ShortcutManager</code>           \u2013            </li> </ul>"},{"location":"framework/api/utils/shortcuts/#cfmtoolbox_editor.utils.cfm_shortcuts.ShortcutManager","title":"ShortcutManager","text":"<pre><code>ShortcutManager(editor_app)\n</code></pre> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>update_editor</code>             \u2013              <p>Update the editor application instance.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/utils/cfm_shortcuts.py</code> <pre><code>def __init__(self, editor_app):\n    \"\"\"\n    Initialize the ShortcutManager with the editor application instance.\n\n    Args:\n        editor_app: The editor application instance.\n    \"\"\"\n    self.editor = editor_app\n    self.is_mac = platform.system() == \"Darwin\"\n    self._define_shortcuts()\n    self._setup_shortcuts()\n</code></pre>"},{"location":"framework/api/utils/shortcuts/#cfmtoolbox_editor.utils.cfm_shortcuts.ShortcutManager(editor_app)","title":"<code>editor_app</code>","text":"\u2013            <p>The editor application instance.</p>"},{"location":"framework/api/utils/shortcuts/#cfmtoolbox_editor.utils.cfm_shortcuts.ShortcutManager.update_editor","title":"update_editor","text":"<pre><code>update_editor(editor_app)\n</code></pre> <p>Update the editor application instance.</p> <p>Parameters:</p> Source code in <code>cfmtoolbox_editor/utils/cfm_shortcuts.py</code> <pre><code>def update_editor(self, editor_app):\n    \"\"\"\n    Update the editor application instance.\n\n    Args:\n        editor_app: The new editor application instance.\n    \"\"\"\n    self.editor = editor_app\n    self._setup_shortcuts()\n</code></pre>"},{"location":"framework/api/utils/shortcuts/#cfmtoolbox_editor.utils.cfm_shortcuts.ShortcutManager.update_editor(editor_app)","title":"<code>editor_app</code>","text":"\u2013            <p>The new editor application instance.</p>"},{"location":"framework/api/utils/utils/","title":"Shortcuts API","text":""},{"location":"framework/api/utils/utils/#cfmtoolbox_editor.utils.cfm_utils","title":"cfm_utils","text":"<p>This module provides utility functions for handling cardinalities and positioning windows in the feature model editor using the Tkinter library.</p> <p>Functions:</p> <ul> <li> <code>cardinality_to_display_str</code>             \u2013              <p>Converts a cardinality to a string representation for display.</p> </li> <li> <code>cardinality_to_edit_str</code>             \u2013              <p>Converts a cardinality to a string representation for editing.</p> </li> <li> <code>edit_str_to_cardinality</code>             \u2013              <p>Converts a string representation of intervals to a Cardinality object.</p> </li> <li> <code>derive_parent_group_cards_for_one_child</code>             \u2013              <p>Derives parent group cardinalities for a single child.</p> </li> <li> <code>derive_parent_group_cards_for_multiple_children</code>             \u2013              <p>Derives parent group cardinalities for multiple children.</p> </li> <li> <code>center_window</code>             \u2013              <p>Calculates the position to center a window relative to a parent widget.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>cardinality_to_display_str</code>             \u2013              <p>Converts a cardinality to a string representation that is displayed in the editor.</p> </li> <li> <code>cardinality_to_edit_str</code>             \u2013              <p>Converts a cardinality to a string representation of the intervals that can be edited by the user.</p> </li> <li> <code>center_window</code>             \u2013              <p>Calculates the position of the window to appear centered relative to the parent widget.</p> </li> <li> <code>derive_parent_group_cards_for_multiple_children</code>             \u2013              <p>Derives the parent group cardinalities from the instance cardinalities of multiple children. Group type cardinality</p> </li> <li> <code>derive_parent_group_cards_for_one_child</code>             \u2013              <p>Derives the parent group cardinalities from the only child's instance cardinality. Group type cardinality is 0 if</p> </li> <li> <code>edit_str_to_cardinality</code>             \u2013              <p>Converts intervals entered by the user to a Cardinality object.</p> </li> </ul>"},{"location":"framework/api/utils/utils/#cfmtoolbox_editor.utils.cfm_utils.cardinality_to_display_str","title":"cardinality_to_display_str","text":"<pre><code>cardinality_to_display_str(\n    cardinality: Cardinality,\n    left_bracket: str,\n    right_bracket: str,\n) -&gt; str\n</code></pre> <p>Converts a cardinality to a string representation that is displayed in the editor.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>The string representation of the cardinality using the specified brackets.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/utils/cfm_utils.py</code> <pre><code>def cardinality_to_display_str(\n    cardinality: Cardinality, left_bracket: str, right_bracket: str\n) -&gt; str:\n    \"\"\"\n    Converts a cardinality to a string representation that is displayed in the editor.\n\n    Args:\n        cardinality (Cardinality): The cardinality to display.\n        left_bracket (str): The left symbol to use for the intervals.\n        right_bracket (str): The right symbol to use for the intervals.\n\n    Returns:\n        str: The string representation of the cardinality using the specified brackets.\n    \"\"\"\n    intervals = cardinality.intervals\n    if not intervals:\n        return f\"{left_bracket}{right_bracket}\"\n\n    return \", \".join(\n        f\"{left_bracket}{interval.lower}, {'*' if interval.upper is None else interval.upper}{right_bracket}\"\n        for interval in intervals\n    )\n</code></pre>"},{"location":"framework/api/utils/utils/#cfmtoolbox_editor.utils.cfm_utils.cardinality_to_display_str(cardinality)","title":"<code>cardinality</code>","text":"(<code>Cardinality</code>)           \u2013            <p>The cardinality to display.</p>"},{"location":"framework/api/utils/utils/#cfmtoolbox_editor.utils.cfm_utils.cardinality_to_display_str(left_bracket)","title":"<code>left_bracket</code>","text":"(<code>str</code>)           \u2013            <p>The left symbol to use for the intervals.</p>"},{"location":"framework/api/utils/utils/#cfmtoolbox_editor.utils.cfm_utils.cardinality_to_display_str(right_bracket)","title":"<code>right_bracket</code>","text":"(<code>str</code>)           \u2013            <p>The right symbol to use for the intervals.</p>"},{"location":"framework/api/utils/utils/#cfmtoolbox_editor.utils.cfm_utils.cardinality_to_edit_str","title":"cardinality_to_edit_str","text":"<pre><code>cardinality_to_edit_str(cardinality: Cardinality) -&gt; str\n</code></pre> <p>Converts a cardinality to a string representation of the intervals that can be edited by the user.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>A string representation of the intervals separating bounds by comma and intervals by semicolon.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/utils/cfm_utils.py</code> <pre><code>def cardinality_to_edit_str(cardinality: Cardinality) -&gt; str:\n    \"\"\"\n    Converts a cardinality to a string representation of the intervals that can be edited by the user.\n\n    Args:\n        cardinality (Cardinality): The cardinality to convert.\n\n    Returns:\n        str: A string representation of the intervals separating bounds by comma and intervals by semicolon.\n    \"\"\"\n    return \"; \".join(\n        f\"{interval.lower},{'*' if interval.upper is None else interval.upper}\"\n        for interval in cardinality.intervals\n    )\n</code></pre>"},{"location":"framework/api/utils/utils/#cfmtoolbox_editor.utils.cfm_utils.cardinality_to_edit_str(cardinality)","title":"<code>cardinality</code>","text":"(<code>Cardinality</code>)           \u2013            <p>The cardinality to convert.</p>"},{"location":"framework/api/utils/utils/#cfmtoolbox_editor.utils.cfm_utils.center_window","title":"center_window","text":"<pre><code>center_window(\n    parent_widget: Widget,\n    window_width: int,\n    window_height: int,\n) -&gt; Tuple[int, int]\n</code></pre> <p>Calculates the position of the window to appear centered relative to the parent widget.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Tuple[int, int]</code>           \u2013            <p>Tuple[int, int]: The x and y coordinate of the top left corner of the window.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/utils/cfm_utils.py</code> <pre><code>def center_window(\n    parent_widget: tk.Widget, window_width: int, window_height: int\n) -&gt; Tuple[int, int]:\n    \"\"\"\n    Calculates the position of the window to appear centered relative to the parent widget.\n\n    Args:\n        parent_widget (tk.Widget): The widget in which to center the window.\n        window_width (int): The width of the window in pixels.\n        window_height (int): The height of the window in pixels.\n\n    Returns:\n        Tuple[int, int]: The x and y coordinate of the top left corner of the window.\n    \"\"\"\n    parent_widget.update_idletasks()\n    main_window_x = parent_widget.winfo_x()\n    main_window_y = parent_widget.winfo_y()\n    main_window_width = parent_widget.winfo_width()\n    main_window_height = parent_widget.winfo_height()\n\n    window_x = main_window_x + (main_window_width // 2) - (window_width // 2)\n    window_y = main_window_y + (main_window_height // 2) - (window_height // 2)\n\n    return window_x, window_y\n</code></pre>"},{"location":"framework/api/utils/utils/#cfmtoolbox_editor.utils.cfm_utils.center_window(parent_widget)","title":"<code>parent_widget</code>","text":"(<code>Widget</code>)           \u2013            <p>The widget in which to center the window.</p>"},{"location":"framework/api/utils/utils/#cfmtoolbox_editor.utils.cfm_utils.center_window(window_width)","title":"<code>window_width</code>","text":"(<code>int</code>)           \u2013            <p>The width of the window in pixels.</p>"},{"location":"framework/api/utils/utils/#cfmtoolbox_editor.utils.cfm_utils.center_window(window_height)","title":"<code>window_height</code>","text":"(<code>int</code>)           \u2013            <p>The height of the window in pixels.</p>"},{"location":"framework/api/utils/utils/#cfmtoolbox_editor.utils.cfm_utils.derive_parent_group_cards_for_multiple_children","title":"derive_parent_group_cards_for_multiple_children","text":"<pre><code>derive_parent_group_cards_for_multiple_children(\n    child_instance_cards: List[Cardinality],\n) -&gt; Tuple[Cardinality, Cardinality]\n</code></pre> <p>Derives the parent group cardinalities from the instance cardinalities of multiple children. Group type cardinality is [mandatory children, all children]. Group instance cardinality is  of the children. <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Tuple[Cardinality, Cardinality]</code>           \u2013            <p>Tuple[Cardinality, Cardinality]: (Group type cardinality, Group instance cardinality) of the parent group.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/utils/cfm_utils.py</code> <pre><code>def derive_parent_group_cards_for_multiple_children(\n    child_instance_cards: List[Cardinality],\n) -&gt; Tuple[Cardinality, Cardinality]:\n    \"\"\"\n    Derives the parent group cardinalities from the instance cardinalities of multiple children. Group type cardinality\n    is [mandatory children, all children]. Group instance cardinality is &lt;sum of minimum lower bounds, sum of maximum\n    upper bounds&gt; of the children.\n\n    Args:\n        child_instance_cards (List[Cardinality]): The feature instance cardinalities of the children.\n\n    Returns:\n        Tuple[Cardinality, Cardinality]: (Group type cardinality, Group instance cardinality) of the parent group.\n    \"\"\"\n    lower_group_type = len(\n        [\n            card\n            for card in child_instance_cards\n            if not any(interval.lower == 0 for interval in card.intervals)\n        ]\n    )\n    upper_group_type = len(child_instance_cards)\n    lower_group_instance = sum(\n        min(interval.lower for interval in card.intervals)\n        for card in child_instance_cards\n        if card.intervals\n    )\n    upper_group_instance = (\n        None\n        if any(\n            interval.upper is None\n            for card in child_instance_cards\n            for interval in card.intervals\n        )\n        else sum(\n            max(\n                interval.upper\n                for interval in card.intervals\n                if interval.upper is not None\n            )\n            for card in child_instance_cards\n            if card.intervals\n        )\n    )\n    return (\n        Cardinality([Interval(lower_group_type, upper_group_type)]),\n        Cardinality([Interval(lower_group_instance, upper_group_instance)]),\n    )\n</code></pre>"},{"location":"framework/api/utils/utils/#cfmtoolbox_editor.utils.cfm_utils.derive_parent_group_cards_for_multiple_children(child_instance_cards)","title":"<code>child_instance_cards</code>","text":"(<code>List[Cardinality]</code>)           \u2013            <p>The feature instance cardinalities of the children.</p>"},{"location":"framework/api/utils/utils/#cfmtoolbox_editor.utils.cfm_utils.derive_parent_group_cards_for_one_child","title":"derive_parent_group_cards_for_one_child","text":"<pre><code>derive_parent_group_cards_for_one_child(\n    child_instance_card: Cardinality,\n) -&gt; Tuple[Cardinality, Cardinality]\n</code></pre> <p>Derives the parent group cardinalities from the only child's instance cardinality. Group type cardinality is 0 if the child can have 0 instances, 1 otherwise. Group instance cardinality is the same as the child's instance cardinality.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Tuple[Cardinality, Cardinality]</code>           \u2013            <p>Tuple[Cardinality, Cardinality]: (Group type cardinality, Group instance cardinality) of the parent group.</p> </li> </ul> Source code in <code>cfmtoolbox_editor/utils/cfm_utils.py</code> <pre><code>def derive_parent_group_cards_for_one_child(\n    child_instance_card: Cardinality,\n) -&gt; Tuple[Cardinality, Cardinality]:\n    \"\"\"\n    Derives the parent group cardinalities from the only child's instance cardinality. Group type cardinality is 0 if\n    the child can have 0 instances, 1 otherwise. Group instance cardinality is the same as the child's instance\n    cardinality.\n\n    Args:\n        child_instance_card (Cardinality): The feature instance cardinality of a child with no siblings.\n\n    Returns:\n        Tuple[Cardinality, Cardinality]: (Group type cardinality, Group instance cardinality) of the parent group.\n    \"\"\"\n    lower_group_type = (\n        0\n        if any(interval.lower == 0 for interval in child_instance_card.intervals)\n        else 1\n    )\n    return Cardinality([Interval(lower_group_type, 1)]), Cardinality(\n        child_instance_card.intervals\n    )\n</code></pre>"},{"location":"framework/api/utils/utils/#cfmtoolbox_editor.utils.cfm_utils.derive_parent_group_cards_for_one_child(child_instance_card)","title":"<code>child_instance_card</code>","text":"(<code>Cardinality</code>)           \u2013            <p>The feature instance cardinality of a child with no siblings.</p>"},{"location":"framework/api/utils/utils/#cfmtoolbox_editor.utils.cfm_utils.edit_str_to_cardinality","title":"edit_str_to_cardinality","text":"<pre><code>edit_str_to_cardinality(\n    raw_cardinality: str,\n) -&gt; Cardinality\n</code></pre> <p>Converts intervals entered by the user to a Cardinality object.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Cardinality</code> (              <code>Cardinality</code> )          \u2013            <p>The Cardinality object constructed from the parsed intervals.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If the intervals are not formatted correctly (Bounds have to be ints or * separated by a comma, intervals are separated by a semicolon).</p> </li> </ul> Source code in <code>cfmtoolbox_editor/utils/cfm_utils.py</code> <pre><code>def edit_str_to_cardinality(raw_cardinality: str) -&gt; Cardinality:\n    \"\"\"\n    Converts intervals entered by the user to a Cardinality object.\n\n    Args:\n        raw_cardinality (str): The intervals to parse.\n\n    Returns:\n        Cardinality: The Cardinality object constructed from the parsed intervals.\n\n    Raises:\n        ValueError: If the intervals are not formatted correctly (Bounds have to be ints or * separated by a comma, intervals are separated by a semicolon).\n    \"\"\"\n    intervals = []\n    for interval in raw_cardinality.split(\";\"):\n        min_str, max_str = interval.split(\",\")\n        min_card = int(min_str.strip())\n        max_card = None if max_str.strip() == \"*\" else int(max_str.strip())\n        intervals.append(Interval(min_card, max_card))\n    return Cardinality(intervals)\n</code></pre>"},{"location":"framework/api/utils/utils/#cfmtoolbox_editor.utils.cfm_utils.edit_str_to_cardinality(raw_cardinality)","title":"<code>raw_cardinality</code>","text":"(<code>str</code>)           \u2013            <p>The intervals to parse.</p>"}]}